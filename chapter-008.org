# -*- eval: (org-babel-lob-ingest "./ob-haskell-common.org"); -*-

#+TITLE: Recursion

#+PROPERTY: header-args:haskell :results replace output
#+PROPERTY: header-args:haskell+ :noweb yes
#+PROPERTY: header-args:haskell+ :wrap EXAMPLE

* 8.01 Recursion
Nothing much

* 8.02 Factorial!
#+NAME: factorial
#+BEGIN_SRC haskell :results none :tangle chapter-008/Factorial.hs
module Factorial where

factorial :: Integer -> Integer
factorial 0 = 1
factorial n = n * factorial (n - 1)
#+END_SRC

#+BEGIN_SRC haskell
:{
<<factorial>>
:}
factorial 0
factorial 1
factorial 7
factorial 16
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
1
1
5040
20922789888000
#+END_EXAMPLE

** Exercise
Given the following definition
#+BEGIN_SRC haskell :eval never
applyTimes :: (Eq a, Num a) => a -> (b -> b) -> b -> b
applyTimes 0 f b = b
applyTimes n f b = f (applyTimes (n-1) f b)
#+END_SRC

Write out the evaluation of the following
#+BEGIN_SRC haskell :eval never
applyTimes 5 (+1) 5
#+END_SRC

#+BEGIN_EXAMPLE
applyTimes 5 (+1) 5
(+1) (applyTimes 4 'applyTimes 5)
(+1) (+1) (applyTimes 3 'applyTimes 5)
(+1) (+1) (+1) (applyTimes 2 'applyTimes 5)
(+1) (+1) (+1) (+1) (applyTimes 1 'applyTimes 5)
(+1) (+1) (+1) (+1) (+1) (applyTimes 0 'applyTimes 5)
(+1) (+1) (+1) (+1) (+1) 5
(+1) (+1) (+1) (+1) 6
(+1) (+1) (+1) 7
(+1) (+1) 8
(+1) 9
10
#+END_EXAMPLE

* 8.03 Bottom
In type theory, a theory within mathematical logic, the bottom type
is the type that has no values. It is also called the zero or empty
type, and is sometimes denoted with falsum (⊥ aka "UP TACK" symbol).

In Haskell is used to represent computation that do not terminate
successfully in any value.

Represents:
- Computation that failed with an error (like raise an ~error~)
- Computation that do not terminate (like infinite recursion)

The following it's a partial function, the real type of the function
here is ~f :: Bool -> Int | ⊥~

#+BEGIN_SRC haskell :eval never
f :: Bool -> Int
f False = 0
f True = error "blah"
#+END_SRC

We can turn the function ~f~ to be a total function with ~Maybe~

#+BEGIN_SRC haskell :eval never
f :: Bool -> Maybe Int
f False = Just 0
f _ = Nothing
#+END_SRC

* 8.04 Fibonacci
#+NAME: fibonacci
#+BEGIN_SRC haskell :results none :tangle chapter-008/Fibonacci.hs
module Fibonacci where

fibonacci :: Integral a => a -> a
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci n = fibonacci (n - 1) + fibonacci (n - 2)
#+END_SRC

#+BEGIN_SRC haskell :results output
:{
<<fibonacci>>
:}
fibonacci 0
fibonacci 1
fibonacci 7
fibonacci 16
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
0
1
13
987
#+END_EXAMPLE

* 8.05 Integral division from scratch
#+NAME: DivFromScratch
#+BEGIN_SRC haskell :results none :tangle chapter-008/DivFromScratch.hs
module DivFromScratch where

type Numerator = Integer
type Denominator = Integer
type Quotient = Integer

dividedBy :: Numerator -> Denominator -> Quotient
dividedBy n d = go n d 0
  where go n d c
          | n < d = c
          | otherwise = go (n - d) d (c + 1)
#+END_SRC

#+BEGIN_SRC haskell
:{
<<DivFromScratch>>
:}
dividedBy 10 2
dividedBy 9 2
dividedBy 3 2
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
5
4
1
#+END_EXAMPLE

The ~go~ function is a common idiom when you need an "helper" function
that takes more arguments (accumulator with initial value) than the
original.

#+BEGIN_SRC haskell
:{
dividedBy :: Integral a => a -> a -> (a, a)
dividedBy n d = go n d 0
  where go n d c
          | n < d = (c, n)
          | otherwise = go (n - d) d (c + 1)
:}
dividedBy 10 2
dividedBy 9 2
dividedBy 3 2
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
(5,0)
(4,1)
(1,1)
#+END_EXAMPLE

* 8.06 Exercises
** Exercise: Review of types

1. What is the type of ~[[True, False], [True, True], [False, True]]~?
   (d) ~[[Bool]]~

2. Which of the following has the same type as
   ~[[True, False], [True, True], [False, True]]~?
   (b) ~[[3 == 3], [6 > 5], [3 < 4]]~

3. For the following function, which of the following is true?
   #+BEGIN_SRC haskell :eval never
   func :: [a] -> [a] -> [a]
   func x y = x ++ y
   #+END_SRC
   (d) All of the above (aka "x and y must be of the same type", "x
   and y must be both lists", "if x is a String then y must be a
   String")

4. For the func code above, which is a valid application of func to
   both of its arguments? (b) ~func "Hello" "World"~

** Exercise: Reviewing currying
Given the following definitions, tell us what value results from
further applications.

#+NAME: exercise-8.2
#+BEGIN_SRC haskell :results none
:{
cattyConny :: String -> String -> String
cattyConny x y = x ++ " mrow " ++ y

-- fill in the types
flippy :: String -> String -> String
flippy = flip cattyConny

appendCatty :: String -> String
appendCatty = cattyConny "woops"

frappe :: String -> String
frappe = flippy "haha"
:}
#+END_SRC

1. What is the value of?
   #+BEGIN_SRC haskell
   <<exercise-8.2>>
   appendCatty "woohoo!"
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   woops mrow woohoo!
   #+END_EXAMPLE

2. What is the value of?
   #+BEGIN_SRC haskell
   <<exercise-8.2>>
   frappe "1"
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   1 mrow haha
   #+END_EXAMPLE

3. What is the value of?
   #+BEGIN_SRC haskell
   <<exercise-8.2>>
   frappe (appendCatty "2")
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   woops mrow 2 mrow haha
   #+END_EXAMPLE

4. What is the value of?
   #+BEGIN_SRC haskell
   <<exercise-8.2>>
   appendCatty (frappe "blue")
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   woops mrow blue mrow haha
   #+END_EXAMPLE

5. What is the value of?
   #+BEGIN_SRC haskell
   <<exercise-8.2>>
   cattyConny (frappe "pink") (cattyConny "green" (appendCatty "blue"))
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   pink mrow haha mrow green mrow woops mrow blue
   #+END_EXAMPLE

6. What is the value of?
   #+BEGIN_SRC haskell
   <<exercise-8.2>>
   cattyConny (flippy "Pugs" "are") "awesome"
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   are mrow Pugs mrow awesome
   #+END_EXAMPLE

** Exercise: Recursion

1. Write out the steps for reducing ~dividedBy 15 2~ to its final
   answer according to the Haskell code.
   #+BEGIN_EXAMPLE
   dividedBy 15 2
   go 15 2 0
   go 13 2 1
   go 11 2 2
   go 9 2 3
   go 7 2 4
   go 5 2 5
   go 3 2 6
   go 1 2 7
   7
   #+END_EXAMPLE

2. Write a function that recursively sums all numbers from 1 to n.
   #+NAME: SumsUpTo
   #+BEGIN_SRC haskell :results none :tangle chapter-008/SumsUpTo.hs
   module SumsUpTo where

   sumsUpTo :: (Eq a, Num a) => a -> a
   sumsUpTo 0 = 0
   sumsUpTo 1 = 1
   sumsUpTo n = n + sumsUpTo (n - 1)

   sumsUpTo' :: (Eq a, Num a) => a -> a
   sumsUpTo' n = up 1 n
     where up m n
             | m == n    = n
             | otherwise = m + (up (m + 1) n)
   #+END_SRC

   #+BEGIN_SRC haskell
   :{
   <<SumsUpTo>>
   :}
   sumsUpTo 6
   sumsUpTo 10
   sumsUpTo' 6
   sumsUpTo' 10
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   21
   55
   21
   55
   #+END_EXAMPLE

3. Write a function that multiplies two integral numbers using
   recursive summation.
   #+NAME: RecursiveMul
   #+BEGIN_SRC haskell :results none :tangle chapter-008/RecursiveMul.hs
   module RecursiveMul where

   recursiveSum :: Integral a => a -> a -> a
   recursiveSum x 0 = x
   recursiveSum x y = recursiveSum (x + 1) (y - 1)

   recursiveMul :: Integral a => a -> a -> a
   recursiveMul x y = go x y 0
     where go x 0 s = s
           go x y s = go x (y - 1) (recursiveSum x s)
   #+END_SRC

   #+BEGIN_SRC haskell
   :{
   <<RecursiveMul>>
   :}
   recursiveSum 2 2
   recursiveSum 2 4
   recursiveMul 2 2
   recursiveMul 2 4
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   4
   6
   4
   8
   #+END_EXAMPLE

** Exercise: Fixing dividedBy
Our ~dividedBy~ function wasn't quite ideal. For one thing. It was a
partial function and doesn't return a result (bottom) when given a
divisor that is 0 or less.

#+NAME: MaybeDividedBy
#+BEGIN_SRC haskell :results none :tangle chapter-008/MaybeDividedBy.hs
module MaybeDividedBy where

type Numerator = Integer
type Denominator = Integer
type Quotient = Integer

data DividedByResult
  = Result Quotient
  | DividedByZero
  deriving Show

dividedBy :: Numerator -> Denominator -> DividedByResult
dividedBy n 0 = DividedByZero
dividedBy n d = Result $ div n d
#+END_SRC

#+BEGIN_SRC haskell
:{
<<MaybeDividedBy>>
:}
dividedBy 10 2
dividedBy 10 (-2)
dividedBy (-10) 2
dividedBy (-10) (-2)
dividedBy 10 0
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Result 5
Result (-5)
Result (-5)
Result 5
DividedByZero
#+END_EXAMPLE

** Exercise: McCarthy 91 function
The McCarthy 91 function yields x − 10 when x > 100 and 91
otherwise (NDE. the description is wrong). The function is
recursive.

#+NAME: McCarthy91
#+BEGIN_SRC haskell :results none :tangle chapter-008/McCarthy91.hs
module McCarthy91 where

mc91 :: Integer -> Integer
mc91 n
  | n > 100 = n - 10
  | otherwise = mc91 . mc91 $ n + 11
#+END_SRC

#+BEGIN_SRC haskell
:{
<<McCarthy91>>
:}
map mc91 [95..110]
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
[91,91,91,91,91,91,91,92,93,94,95,96,97,98,99,100]
#+END_EXAMPLE

** Exercise: Numbers into words
Complete the definition

#+BEGIN_SRC haskell :eval never
module WordNumber where

import Data.List (intersperse)

digitToWord :: Int -> String
digitToWord n = undefined

digits :: Int -> [Int]
digits n = undefined

wordNumber :: Int -> String
wordNumber n = undefined
#+END_SRC

#+BEGIN_SRC haskell :results none :tangle chapter-008/WordNumber.hs
module WordNumber where

import Data.List (intersperse)

digitToWord :: Int -> String
digitToWord 0 = "zero"
digitToWord 1 = "one"
digitToWord 2 = "two"
digitToWord 3 = "three"
digitToWord 4 = "four"
digitToWord 5 = "five"
digitToWord 6 = "six"
digitToWord 7 = "seven"
digitToWord 8 = "eight"
digitToWord 9 = "nine"

digits :: Int -> [Int]
digits n
  | n < 10 = [n]
  | otherwise = digits (div n 10) ++ [mod n 10]

wordNumber :: Int -> String
wordNumber n = concat $ intersperse "-" $ map digitToWord $ digits n
#+END_SRC

#+BEGIN_SRC haskell
<<add-current-chapter-directory-in-path()>>
:load WordNumber
digitToWord 3
digitToWord 7
digitToWord 0
digits 0
digits 4
digits 14
digits 149
digits 1498
wordNumber 1498
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
[1 of 1] Compiling WordNumber       ( /home/coder/code/haskellbook-exercises/chapter-008/WordNumber.hs, interpreted )
Ok, one module loaded.
three
seven
zero
[0]
[4]
[1,4]
[1,4,9]
[1,4,9,8]
one-four-nine-eight
#+END_EXAMPLE
