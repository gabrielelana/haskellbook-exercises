# -*- eval: (org-babel-lob-ingest "./ob-haskell-common.org"); -*-

#+TITLE: More Functional Patterns

#+PROPERTY: header-args:haskell :results replace output
#+PROPERTY: header-args:haskell+ :noweb yes
#+PROPERTY: header-args:haskell+ :wrap EXAMPLE

* 7.01 Make it more functional
...

* 7.02 Arguments and parameters
How variables get /bound/ to values?
- Apply arguments values to function parameters (~f x = x; f 5~)
- ~let~ expressions (~let x = 5 in ...~)
- ~where~ statements (~where x = 5~)
- Pattern matching (~x:_ = [5, 6, 7]~)
- Declaration (~x = 5~)

Haskell is /lexically scoped/ language. Variables can shadow other
variables, when two variables have the same name, then the one in the
most nested scope shadows the others.

* 7.03 Anonymous functions
Anonymous functions syntax

#+BEGIN_SRC haskell :results none
triple = \x -> x * 3
#+END_SRC

#+BEGIN_SRC haskell :results none
triple = (\x -> x * 3) :: Integer -> Integer
#+END_SRC

#+BEGIN_SRC haskell :results none
:{
triple :: Integer -> Integer
triple = \x -> x * 3
:}
#+END_SRC

#+BEGIN_SRC haskell :results none
plus = \x y -> x + y
#+END_SRC

#+BEGIN_SRC haskell :results none
plus = \x -> \y -> x + y
#+END_SRC

When it is useful an anonymous function?
- When it gets passed to another function.
- When it not called anywhere else.

** Exercise: Grab Bag

1. Which (two or more) of the following are equivalent?
   The answer is: all of them are equivalent

   a. ~mTh x y z = x * y * z~
   b. ~mTh x y = \z -> x * y * z~
   c. ~mTh x = \y -> \z -> x * y * z~
   d. ~mTh = \x -> \y -> \z -> x * y * z~

2. The type of the previous function is ~Num a => a -> a -> a ->
   a~. Which type is ~mTh 3~? The answer is: d

   a. ~Integer -> Integer -> Integer~
   b. ~Num a => a -> a -> a -> a~
   c. ~Num a => a -> a~
   d. ~Num a => a -> a -> a~

3. Write anonymous functions

   a. Rewrite the ~f~ function in the ~where~ clause
   #+BEGIN_SRC haskell :results none
   :{
   addOneIfOdd n = case odd n of
     True -> f n
     False -> n
     where f n = n + 1
   :}
   addOneIfOdd 1
   addOneIfOdd 2
   #+END_SRC

   #+BEGIN_SRC haskell :results none
   :{
   addOneIfOdd n = case odd n of
     True -> f n
     False -> n
     where f = \n -> n + 1
   :}
   addOneIfOdd 1
   addOneIfOdd 2
   #+END_SRC

   b. Rewrite the following to use anonymous lambda syntax
   #+BEGIN_SRC haskell :results none
   addFive x y = (if x > y then y else x) + 5

   addFive 1 2
   addFive 2 1
   #+END_SRC

   #+BEGIN_SRC haskell :results none
   addFive = \x y -> (if x > y then y else x) + 5

   addFive 1 2
   addFive 2 1
   #+END_SRC

   c. Rewrite the following so that it doesn’t use anonymous lambda
   syntax
   #+BEGIN_SRC haskell :results none
   mflip f = \x -> \y -> f y x
   #+END_SRC

   #+BEGIN_SRC haskell :results none
   mflip f x y = f y x
   #+END_SRC

* 7.04 Pattern matching
It's a way to match values against a pattern and when appropriate to
bound variables to successful matches.

What /pattern matching/ does?
- Matches pattern against values or /Data Constructors/ (not /Types/).
- On success binds variables exposed in the pattern.

What /pattern matching/ is used for?
- Vary what a function does given different input.
- Unpack and expose the contents of our data.

Pattern matching deconstruct /Data Constructors/.

The special symbol ~_~ is the /universal pattern/ that matches with
everything.

Patterns are ordered, first pattern that matches wins.

Patterns must be exhaustive and cover all the cases given the types
involved in the pattern. To have a compile time warning you must use
the ~-Wall~ compilation flag.

** Exercise: Variety Pack

1. Given the following declarations
   #+BEGIN_SRC haskell :results none
   k (x, y) = x
   k1 = k ((4-1), 10)
   k2 = k ("three", (1 + 2))
   k3 = k (3, True)
   #+END_SRC

   1. What is the type of k? ~k :: (t1, t2) -> t1~
   2. What is the type of k2? ~k2 :: [Char]~
   3. k2 has the same type as k1 or k3? No
   4. Of k1, k2, k3, which will return the number 3 as the result? k1
      and k3

2. Fill in the definition of the following function
   #+BEGIN_SRC haskell :results none
   :{
   f :: (a, b, c)
     -> (d, e, f)
     -> ((a, d), (c, f))
   f = undefined
   :}
   #+END_SRC

   #+BEGIN_SRC haskell :results none
   :{
   f :: (a, b, c)
     -> (d, e, f)
     -> ((a, d), (c, f))
   f (a, _, c) (d, _, f) = ((a, d), (c, f))
   :}
   #+END_SRC

* 7.05 Case Expressions
#+BEGIN_SRC haskell :results none
:{
case 5 > 7 of
  False -> "It works"
  True -> "Run!"
:}
#+END_SRC

** Exercise: Case Practice
1. Rewrite the following function using case expressions
   #+BEGIN_SRC haskell :results none
   functionC x y = if (x > y) then x else y

   functionC 1 2
   functionC 2 1
   #+END_SRC

   #+BEGIN_SRC haskell :results none
   :{
   functionC x y = case x > y of
     True -> x
     False -> y
   :}

   functionC 1 2
   functionC 2 1
   #+END_SRC

2. Rewrite the following function using case expressions.
   #+BEGIN_SRC haskell :results none
   ifEvenAdd2 n = if even n then (n+2) else n

   ifEvenAdd2 1
   ifEvenAdd2 2
   #+END_SRC

   #+BEGIN_SRC haskell :results none
   :{
   ifEvenAdd2 n = case even n of
     True -> n + 2
     False -> n
   :}

   ifEvenAdd2 1
   ifEvenAdd2 2
   #+END_SRC

3. Rewrite the following function using case expressions. Note that
   the function doesn't cover all the cases, fix that.
   #+BEGIN_SRC haskell :results none
   :{
   nums x =
     case compare x 0 of
       LT -> -1
       GT -> 1
   :}
   #+END_SRC

   #+BEGIN_SRC haskell :results none
   :{
   nums x =
     case compare x 0 of
       LT -> -1
       EQ -> 0
       GT -> 1
   :}
   #+END_SRC

* 7.06 High Order functions
/High Order/ functions are functions which themselves take functions
as arguments or return functions as results. Due to currying,
technically any function that appears to take more than one argument
is higher order in Haskell.

** Exercise: Artful Dodgy
Given the following definitions tell us what value results from
further applications.

#+BEGIN_SRC haskell :results none
dodgy x y = x + y * 10
oneIsOne = dodgy 1
oneIsTwo = (flip dodgy) 2
#+END_SRC

Fill the types of the previous functions

#+BEGIN_SRC haskell :results none
:{
dodgy :: Num a => a -> a -> a
dodgy x y = x + y * 10
:}

:{
oneIsOne :: Num a => a -> a
oneIsOne = dodgy 1
:}

:{
oneIsTwo :: Num a => a -> a
oneIsTwo = (flip dodgy) 2
:}
#+END_SRC

1. ~dodgy 1 0~ is? ~1~
2. ~dodgy 1 1~ is? ~11~
3. ~dodgy 2 2~ is? ~22~
4. ~dodgy 1 2~ is? ~21~
5. ~dodgy 2 1~ is? ~12~
6. ~oneIsOne 1~ is? ~11~
7. ~oneIsOne 2~ is? ~21~
8. ~oneIsTwo 1~ is? ~21~
9. ~oneIsTwo 2~ is? ~22~
10. ~oneIsOne 3~ is? ~31~
11. ~oneIsTwo 3~ is? ~23~

* 7.07 Guards
A guard relies on the truth value to decide between two or more
possible results.

#+BEGIN_SRC haskell :results none
:{
myAbs :: Integer -> Integer
myAbs x
  | x < 0 = (-x)
  | otherwise = x
:}
#+END_SRC

- Guards are evaluated in order.
- Guards must be expressions that evaluates to ~Bool~.
- Guards must be placed between parameters and the equal sign in
  functions.
- ~otherwise~ it's another name for ~True~
- Guards can be refactored with the use of ~where~
  #+BEGIN_SRC haskell :results none
  :{
  avgGrade :: (Fractional a, Ord a) => a -> Char
  avgGrade x
    | y >= 0.9 = 'A'
    | y >= 0.8 = 'B'
    | y >= 0.7 = 'C'
    | y >= 0.59 = 'D'
    | otherwise = 'F'
    where y = x / 100
  :}
  #+END_SRC

** Exercise: Guard Duty
1. Guard clauses are evaluated in order so if we put a guard that is
   always true as the first then the following guards are never
   evaluated and the output will always be the one associated to the
   first guard.

2. What happens if you take ~avgGrade~ as it is written and reorder
   the guards? Does it still typecheck and work the same? Try moving
   ~| y>= 0.7 = 'C'~ and passing it the argument ~90~, which should be
   an ~'A'~ Does it return an ~'A'~ ? No, it returns ~'C'~

   #+BEGIN_SRC haskell :results none
   :{
   avgGrade :: (Fractional a, Ord a) => a -> Char
   avgGrade x
     | y >= 0.7 = 'C'
     | y >= 0.9 = 'A'
     | y >= 0.8 = 'B'
     | y >= 0.59 = 'D'
     | otherwise = 'F'
     where y = x / 100
   :}
   #+END_SRC

3. What's the behaviour of the following function? b
   #+BEGIN_SRC haskell :results none
   :{
   pal xs
     | xs == reverse xs = True
     | otherwise = False
   :}
   #+END_SRC

   a) ~xs~ written backwards when it’s ~True~
   b) ~True~ when ~xs~ is a palindrome
   c) ~False~ when ~xs~ is a palindrome
   d) ~False~ when ~xs~ is reversed

4. What types of arguments can ~pal~ take? ~Eq a => [a]~

5. What is the type of the function ~pal~? ~pal :: Eq a => [a] -> Bool~

6. The following function returns? c
   #+BEGIN_SRC haskell :results none
   :{
   numbers x
     | x < 0 = -1
     | x == 0 = 0
     | x > 0 = 1
   :}
   #+END_SRC

   a) the value of its argument plus or minus 1
   b) the negation of its argument
   c) an indication of whether its argument is a positive or negative number or zero
   d) binary machine language

7. What types of arguments can ~numbers~ take?
   ~(Ord a, Num a) => a~

8. What is the type of the function numbers?
   ~numbers :: (Ord a, Num a, Num p) => a -> p~

* 7.08 Function composition
/Function composition/ is a type of high-order function that allow us
to combine functions such that the result of applying one function
gets passed to the next function as an argument.
#+BEGIN_SRC haskell
:t (.)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
(.) :: (b -> c) -> (a -> b) -> a -> c
#+END_EXAMPLE

* 7.09 Pointfree Style
Pointfree refers to a style of composing functions without specifying
their arguments. Derives from topology where there're spaces made of
points and functions between those points, specifying functions
without points means specifying functions without arguments.

#+BEGIN_SRC haskell :results none
addOne x = x + 1
addOneAnonymous = \x -> x + 1
addOnePointfree = (+1)
#+END_SRC

* 7.10 Demonstrating composition
Our dearest function ~print~ is nothing more than the composition of
~putStrLn~ and ~show~

#+BEGIN_SRC haskell
:t putStrLn
:t show
:t print
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
putStrLn :: String -> IO ()
show :: Show a => a -> String
print :: Show a => a -> IO ()
#+END_EXAMPLE

It can be written like that
#+BEGIN_SRC haskell :results none
:{
print' :: Show a => a -> IO ()
print' x = putStrLn (show x)
:}
#+END_SRC

But can be more cleaner in a pointfree style
#+BEGIN_SRC haskell :results none
:{
print' :: Show a => a -> IO ()
print'= putStrLn . show
:}
#+END_SRC

* 7.11 Exercises
** Multiple Choice

1. A polymorphic function (d) may resolve to values of different
   types depending on inputs

2. Two functions named ~f~ and ~g~ have types ~Char -> String~ and
   ~String -> [String]~ respectively. The composed function ~g . f~
   has the type (b) ~Char -> [String]~

3. A function ~f~ has the type ~Ord a => a -> a -> Bool~ and we
   apply it to one numeric value. What is the type now? (d)
   ~(Num a, Ord a) => a -> Bool~

4. A function with the type ~(a -> b) -> c~ (b) is an higher-order
   function

5. Given the following definition of ~f~, what is the type of
   ~f True~? (a) ~Bool~
   #+BEGIN_SRC haskell :results none
   :{
   f :: a -> a
   f x = x
   :}
   :t f True
   #+END_SRC

** Let's write code

1. The following function returns the tens digit of an integral argument.
   #+BEGIN_SRC haskell :results none
   :{
   tensDigit :: Integral a => a -> a
   tensDigit x = d
     where xLast = x `div` 10
           d = xLast `mod` 10
   :}
   tensDigit 18982912
   tensDigit 18982923
   #+END_SRC

   1. First, rewrite it using divMod.
      #+BEGIN_SRC haskell :results none
      :{
      tensDigit :: Integral a => a -> a
      tensDigit x = d
        where (xLast, _) = divMod x 10
              (_, d) = divMod xLast 10
      :}
      tensDigit 18982912
      tensDigit 18982923
      #+END_SRC

      In a more convoluted way
      #+BEGIN_SRC haskell :results none
      :{
      tensDigit :: Integral a => a -> a
      tensDigit = (snd . tensSplit) . (fst . tensSplit)
        where tensSplit = flip divMod 10
      :}
      tensDigit 18982912
      tensDigit 18982923
      #+END_SRC

   2. Does the divMod version have the same type as the original
      version? Yes

   3. Next, let’s change it so that we’re getting the hundreds
      digit instead.
      #+BEGIN_SRC haskell :results none
      :{
      hundredsDigit :: Integral a => a -> a
      hundredsDigit x = d
        where (xLast, _) = divMod x 100
              (_, d) = divMod xLast 10
      :}
      hundredsDigit 18982912
      hundredsDigit 18982723
      #+END_SRC

2. Implement the function of the type ~a -> a -> Bool -> a~

   Using a /case expression/
   #+BEGIN_SRC haskell :results none
   :{
   foldBool :: a -> a -> Bool -> a
   foldBool x y cond =
     case cond of
       True -> x
       False -> y
   :}
   foldBool 1 2 True
   foldBool 1 2 False
   #+END_SRC

   Using /guards/
   #+BEGIN_SRC haskell :results none
   :{
   foldBool :: a -> a -> Bool -> a
   foldBool x y cond
     | cond = x
     | otherwise = y
   :}
   foldBool 1 2 True
   foldBool 1 2 False
   #+END_SRC

3. Fill in the definition.
   #+BEGIN_SRC haskell :results none
   :{
   g :: (a -> b) -> (a, c) -> (b, c)
   g = undefined
   :}
   #+END_SRC

   #+BEGIN_SRC haskell :results none
   :{
   g :: (a -> b) -> (a, c) -> (b, c)
   g f (a, c) = (f a, c)
   :}
   #+END_SRC

4. Writing point free versions of existing code
   #+NAME: RoundTrip
   #+BEGIN_SRC haskell :results none :tangle chapter-007/RoundTrip.hs
   module RoundTrip where

   roundTrip :: (Show a, Read a) => a -> a
   roundTrip a = read (show a)

   main = do
     print (roundTrip 4)
     print (id 4)
   #+END_SRC

   #+BEGIN_SRC haskell :results output
   :{
   <<RoundTrip>>
   :}
   main
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   4
   4
   #+END_EXAMPLE

5. Write a pointfree version of roundTrip
   #+NAME: RoundTripPointFree
   #+BEGIN_SRC haskell :results none :tangle chapter-007/RoundTripPointFree.hs
   module RoundTripPointFree where

   roundTrip :: (Show a, Read a) => a -> a
   roundTrip = read . show

   main = do
     print (roundTrip 4)
     print (id 4)
   #+END_SRC

   #+BEGIN_SRC haskell :results output
   :{
   <<RoundTripPointFree>>
   :}
   main
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   4
   4
   #+END_EXAMPLE

6. change the type of roundTrip in Arith4 to
   ~(Show a, Read b) => a -> b~. How might we tell GHC which
   instance of Read to dispatch against the String now?
   #+NAME: RoundTripDispatch
   #+BEGIN_SRC haskell :results none :tangle chapter-007/RoundTripDispatch.hs
   module RoundTripDispatch where

   roundTrip :: (Show a, Read b) => a -> b
   roundTrip = read . show

   main = do
     print ((roundTrip 4) :: Integer)
     print (id 4)
   #+END_SRC

   #+BEGIN_SRC haskell :results output
   :{
   <<RoundTripDispatch>>
   :}
   main
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   4
   4
   #+END_EXAMPLE
