# -*- eval: (org-babel-lob-ingest "./ob-haskell-common.org"); -*-

#+TITLE: Testing

#+PROPERTY: header-args:haskell :results replace output
#+PROPERTY: header-args:haskell+ :noweb yes
#+PROPERTY: header-args:haskell+ :wrap EXAMPLE

* 14.01 Testing
Nothing much

* 14.02 A Quick Tour of Testing for the Uninitiated
- Testing to support the compiler and prevent (still occurring)
  runtime errors.
- State expectations and verify that the result meets the
  expectations.
- /Unit Testing/ example driven tests that tests the smallest
  independent units of software. The reference library is (/HUnit/)
- /Specification Testing/ kind of like unit tests but with assertions
  that are more human readable (hence the term specification). The
  reference library is (HSpec)
- Both /Unit Testing/ and /Specification Testing/ they are not meant
  to tests the interaction between the units.
- /Property Testing/ you must provide truth-valued, universally
  quantified functions which will be checked on the result of the
  application of the function to a randomly generated input.

* 14.03 Conventional Testing
Create and empty project [[file:chapter-014/addition/][addition]] and add some /HSpec/ tests

- /HSpec/ heavily uses /do notation/, /do notation/ allows to sequence
  monadic actions, here the monad is not ~IO~ but a more specific
  ~SpecWith~
- ~shouldBe :: (Show a, Eq a) => a -> a -> Expectation~
- ~shouldBe~ is an augmented ~==~

* 14.04 Enter QuickCheck
Allows to tests for laws or properties of the code. /HSpec/ has
/QuickCheck/ integration so we can write code as follows

#+BEGIN_SRC haskell :eval never
it "x + 1 is alwasy greater than x" $ do
  property $ \x -> x + 1 > (x :: Int)
#+END_SRC

/QuickCheck/ relies on a /typeclass/ ~Arbitrary~ to provide a
generator which is /newtype/ ~Gen~

#+BEGIN_SRC haskell :eval never
class Arbitrary a where
  arbitrary :: Gen a
  shrink :: a -> [a]
#+END_SRC

We can use ~sample~ to get some random data
#+BEGIN_SRC haskell
import Test.QuickCheck
:t sample
:t sample'
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
sample :: Show a => Gen a -> IO ()
sample' :: Gen a -> IO [a]
#+END_EXAMPLE

We can use ~arbitrary~ to provide a ~Gen a~ for ~sample~
#+BEGIN_SRC haskell
import Test.QuickCheck
sample (arbitrary :: Gen Int)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
0
2
3
-4
5
0
-8
-7
-16
5
-10
#+END_EXAMPLE

We can create a simple generator with the use of ~return~. The
~return~ will put our value in a ~Monad~ in this case the ~m~ is
~Gen~.
#+BEGIN_SRC haskell
import Test.QuickCheck
:t return
:{
trivialInt :: Gen Int
trivialInt = return 1
:}
sample' trivialInt
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
return :: Monad m => a -> m a
[1,1,1,1,1,1,1,1,1,1,1]
#+END_EXAMPLE

We can create another kind generator generating values from a
predefined set of values with ~elements~
#+BEGIN_SRC haskell
import Test.QuickCheck
:t elements
:{
oneTwoOrThree :: Gen Int
oneTwoOrThree = elements [1, 2, 3]
:}
sample' oneTwoOrThree
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
elements :: [a] -> Gen a
[2,2,1,2,1,3,1,3,3,2,2]
#+END_EXAMPLE

There's also ~choose~ which will choose an element in a tuple of two
elements.
#+BEGIN_SRC haskell
import Test.QuickCheck
:t choose
:{
generateBool :: Gen Bool
generateBool = choose (True, False)
:}
sample' generateBool
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
choose :: System.Random.Random a => (a, a) -> Gen a
[False,True,False,False,True,False,False,True,True,False,True]
#+END_EXAMPLE

A more complex example
#+BEGIN_SRC haskell
import Test.QuickCheck
:{
generateTuple :: (Arbitrary a, Arbitrary b) => Gen (a, b)
generateTuple = do
  a <- arbitrary
  b <- arbitrary
  return (a, b)
:}
sample' (generateTuple :: Gen (Int, Int))
sample' (generateTuple :: Gen (Float, Int))
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
[(0,0),(1,0),(3,-4),(3,6),(-1,-5),(-2,-7),(-6,-9),(11,14),(6,-16),(-10,-10),(-12,15)]
[(0.0,0),(1.1954738,-2),(3.507558,2),(5.6516614,-2),(1.899548,-5),(-2.7970998,-6),(-1.3980322,-2),(-8.2747135,7),(-3.3106103,-16),(-15.605081,-12),(-11.365738,-4)]
#+END_EXAMPLE

We can ask for everything that has an instance of ~Arbitrary~ type
class. We can also generate ~Maybe~
#+BEGIN_SRC haskell
import Test.QuickCheck
:t frequency
:{
generateMaybe :: (Arbitrary a) => Gen (Maybe a)
generateMaybe = do
  a <- arbitrary
  frequency [(1, return Nothing), (3, return (Just a))]
:}
sample' (generateMaybe :: (Gen (Maybe Int)))
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
frequency :: [(Int, Gen a)] -> Gen a
[Just 0,Just (-1),Just 1,Just (-1),Just (-7),Just (-4),Nothing,Just 8,Just 16,Just 3,Just (-19)]
#+END_EXAMPLE

* 14.05 Morse Code
See the implementation [[./chapter-014/morse-code][here]]

#+BEGIN_SRC bash :results output :wrap EXAMPLE
cd ./chapter-014/morse-code
echo "main" | stack ghci -- morse-code:tests
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
GHCi, version 8.4.3: http://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/coder/.ghc/ghci.conf
[1 of 1] Compiling Main             ( /home/coder/code/haskellbook-exercises/chapter-014/morse-code/tests/tests.hs, interpreted )
Ok, one module loaded.
Loaded GHCi configuration from /tmp/haskell-stack-ghci/786931a3/ghci-script
λ +++ OK, passed 100 tests.
λ Leaving GHCi.
#+END_EXAMPLE

* 14.06 Arbitrary instances
One of the more important part of learning how to use /QuickCheck/ is
to learn how to write instances of /Arbitrary/ typeclass.

The simplest instance for the simplest type
#+BEGIN_SRC haskell
import Test.QuickCheck

data Trivial = Trivial deriving (Eq, Show)

:{
instance Arbitrary Trivial where
  arbitrary = return Trivial
:}

sample (arbitrary :: Gen Trivial)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Trivial
Trivial
Trivial
Trivial
Trivial
Trivial
Trivial
Trivial
Trivial
Trivial
Trivial
#+END_EXAMPLE

Generating for higher order types, we use the ~Gen~ monad to pluck a
value of ~a~ out of the air.
#+BEGIN_SRC haskell
import Test.QuickCheck

data Identity a = Identity a deriving (Eq, Show)

:{
instance Arbitrary a => Arbitrary (Identity a) where
  arbitrary = do
    a <- arbitrary
    return $ Identity a
:}

putStrLn "=== Identity Int"
sample (arbitrary :: Gen (Identity Int))

putStrLn "=== Identity Char"
sample (arbitrary :: Gen (Identity Char))
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
=== Identity Int
Identity 0
Identity 1
Identity 2
Identity (-4)
Identity 4
Identity 8
Identity (-10)
Identity (-11)
Identity 14
Identity 14
Identity 17
=== Identity Char
Identity 'Z'
Identity '\86583'
Identity '\717825'
Identity '\326353'
Identity 'v'
Identity 'D'
Identity '\758965'
Identity '\687240'
Identity 'C'
Identity ';'
Identity '\FS'
#+END_EXAMPLE

More interesting is an instance for a sum type. While generating a
value we need to choose which of the data constructor to use, to do
that we will use the ~oneof~ function from ~QuickCheck~
#+BEGIN_SRC haskell
import Test.QuickCheck

data Sum a b = First a | Second b deriving (Eq, Show)

:{
instance (Arbitrary a, Arbitrary b) => Arbitrary (Sum a b) where
  arbitrary = do
    a <- arbitrary
    b <- arbitrary
    oneof [ return $ First a, return $ Second b ]
:}

sample (arbitrary :: Gen (Sum Char Int))
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Second 0
Second (-1)
First '\CAN'
Second 3
First 'a'
First '6'
First '\DC1'
Second 5
First 'G'
First '\3077'
Second (-5)
#+END_EXAMPLE

We can use ~frequency~ to choose not equally between data constructors
#+BEGIN_SRC haskell
import Test.QuickCheck

data Sum a b = First a | Second b deriving (Eq, Show)

:{
instance (Arbitrary a, Arbitrary b) => Arbitrary (Sum a b) where
  arbitrary = do
    a <- arbitrary
    b <- arbitrary
    frequency [ (10, return $ First a), (1, return $ Second b) ]
:}

sample (arbitrary :: Gen (Sum Char Int))
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
First '\CAN'
First 'G'
First '\541240'
First '\265378'
Second 5
First ' '
First '\780067'
First '\ACK'
First '$'
First '\786666'
First '\EOT'
#+END_EXAMPLE

* Exercises
** Validating Numbers into Words
Write tests for the module [[file:./chapter-008/WordNumber.hs][WordNumber]]

#+BEGIN_SRC haskell
<<add-chapter-directory-in-path(chapter="chapter-008")>>
:load WordNumber

import Test.Hspec
import WordNumber (digitToWord, digits, wordNumber)

:{
hspec $ do
  describe "digitToWord" $ do
    it "returns zero for 0" $ do
      digitToWord 0 `shouldBe` "zero"
    it "returns one for 1" $ do
      digitToWord 1 `shouldBe` "one"
    it "returns nine for 9" $ do
      digitToWord 9 `shouldBe` "nine"

  describe "digits" $ do
    it "returns [1] for 1" $ do
      digits 1 `shouldBe` [1]
    it "returns [1, 0, 0] for 100" $ do
      digits 100 `shouldBe` [1, 0, 0]
    it "returns [1, 2, 3, 4, 5] for 12345" $ do
      digits 12345 `shouldBe` [1, 2, 3, 4, 5]

  describe "wordNumber" $ do
    it "returns one-zero-zero for 100" $ do
      wordNumber 100 `shouldBe` "one-zero-zero"
    it "returns nien-zero-zero-one for 9001" $ do
      wordNumber 9001 `shouldBe` "nine-zero-zero-one"
:}
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
[1 of 1] Compiling WordNumber       ( /home/coder/code/haskellbook-exercises/chapter-008/WordNumber.hs, interpreted )
Ok, one module loaded.
digitToWord
  returns zero for 0
  returns one for 1
  returns nine for 9
digits
  returns [1] for 1
  returns [1, 0, 0] for 100
  returns [1, 2, 3, 4, 5] for 12345
wordNumber
  returns one-zero-zero for 100
  returns nien-zero-zero-one for 9001

Finished in 0.0025 seconds
8 examples, 0 failures
#+END_EXAMPLE

** Using QuickCheck
Test some simple mathematical properties with /QuichCheck/

1. Given the following function
   #+BEGIN_SRC haskell :eval never
   half x = x / 2
   #+END_SRC

   This property should hold
   #+BEGIN_SRC haskell :eval never
   halfIdentity = (*2) . half
   #+END_SRC

   #+BEGIN_SRC haskell
   import Test.QuickCheck

   half x = x / 2

   :{
   property_HalfIdentity :: Property
   property_HalfIdentity =
     forAll (arbitrary :: Gen (Float)) (\x -> x == (*2) (half x))
   :}

   <<quickcheck-with-output>>

   quickCheckWithOutput property_HalfIdentity
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

2. For an ordered list the following property should hold
   #+NAME: ordered-list-check
   #+BEGIN_SRC haskell :eval never
   :{
   listOrdered :: (Ord a) => [a] -> Bool
   listOrdered xs =
     snd $ foldr go (Nothing, True) xs
     where go _ status@(_, False) = status
           go y (Nothing, t) = (Just y, t)
           go y (Just x, t) = (Just y, x >= y)
   :}
   #+END_SRC

   #+BEGIN_SRC haskell
   import Test.QuickCheck
   import Data.List (sort)

   <<ordered-list-check>>

   :{
   orderedListGenerator :: (Arbitrary a, Ord a) => Gen [a]
   orderedListGenerator = do
     a <- arbitrary
     return $ sort a
   :}

   sample (orderedListGenerator :: Gen [Int])

   :{
   property_OrderedListProperty :: Property
   property_OrderedListProperty =
     forAll orderedListGenerator listOrdered
   :}

   <<quickcheck-with-output>>

   quickCheckWithOutput property_OrderedListProperty
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   []
   [-1]
   []
   [-6,-6,2,6,6]
   [-5,-4,3,8,8]
   [-7,-3,6,7,10]
   []
   [-7,-1]
   []
   [10]
   [-18,-15,-12,-3,-1,7,11,14]
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

 3. Test the associative and commutative propertys of addition
    #+BEGIN_SRC haskell
    import Test.QuickCheck

    :{
    associativeProperty :: (Eq a, Num a) => a -> a -> a -> Bool
    associativeProperty x y z = (x + y) + z == x + (y + z)
    :}

    :{
    commutativeProperty :: (Eq a, Num a) => a -> a -> Bool
    commutativeProperty x y = x + y == y + x
    :}

   <<quickcheck-with-output>>

    quickCheckWithOutput (forAll arbitrary associativeProperty)
    quickCheckWithOutput (forAll arbitrary commutativeProperty)
    #+END_SRC

    #+RESULTS:
    #+BEGIN_EXAMPLE
    +++ OK, passed 100 tests.\n
    +++ OK, passed 100 tests.\n
    #+END_EXAMPLE


4. Do the same for multiplication
   #+BEGIN_SRC haskell
   import Test.QuickCheck

   :{
   associativeProperty :: (Eq a, Num a) => a -> a -> a -> Bool
   associativeProperty x y z = (x * y) * z == x * (y * z)
   :}

   :{
   commutativeProperty :: (Eq a, Num a) => a -> a -> Bool
   commutativeProperty x y = x * y == y * x
   :}

   <<quickcheck-with-output>>

   quickCheckWithOutput (forAll arbitrary associativeProperty)
   quickCheckWithOutput (forAll arbitrary commutativeProperty)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

5. Tests the laws involving ~quot/rem~ and ~div/mod~
   #+BEGIN_SRC haskell
   import Test.QuickCheck

   :{
   quotAndRemLaw :: Integral a => a -> a -> Bool
   quotAndRemLaw x y = (quot x y) * y + (rem x y) == x
   :}

   :{
   divAndModLaw :: Integral a => a -> a -> Bool
   divAndModLaw x y = (div x y) * y + (mod x y) == x
   :}

   <<quickcheck-with-output>>

   quickCheckWithOutput (forAll (arbitrary :: Gen (Int, NonZero Int)) (\(x, NonZero y) -> quotAndRemLaw x y)
   quickCheckWithOutput (forAll (arbitrary :: Gen (Int, NonZero Int)) (\(x, NonZero y) -> divAndModLaw x y)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

6. Is ~(^)~ associative? Is it commutative? Try to prove it
   #+BEGIN_SRC haskell
   import Test.QuickCheck

   :{
   associativeProperty :: (Integral a) => a -> a -> a -> Bool
   associativeProperty x y z = (x ^ y) ^ z == x ^ (y ^ z)
   :}

   :{
   commutativeProperty :: (Integral a) => a -> a -> Bool
   commutativeProperty x y = x ^ y == y ^ x
   :}

   <<quickcheck-with-output>>

   quickCheckWithOutput (forAll arbitrary associativeProperty)
   quickCheckWithOutput (forAll arbitrary commutativeProperty)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   ,*** Failed! Falsified (after 1 test):\n0\n0\n0\n
   ,*** Failed! Falsified (after 3 tests):\n1\n0\n
   #+END_EXAMPLE

7. Test that reversing the reverse of a list is equal to identity
   #+BEGIN_SRC haskell
   import Test.QuickCheck

   :{
   reverseOfReverseProperty :: (Eq a) => [a] -> Bool
   reverseOfReverseProperty xs = (reverse . reverse) xs == xs
   :}

   <<quickcheck-with-output>>

   quickCheckWithOutput (forAll arbitrary reverseOfReverseProperty)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

8. Write a property for the definition of ~($)~
   #+BEGIN_SRC haskell
   import Test.QuickCheck

   :{
   applicationOperatorDefinition :: (Eq b) => Blind (a -> b) -> a -> Bool
   applicationOperatorDefinition (Blind f) x = (f x) == (f $ x)
   :}

   <<quickcheck-with-output>>

   quickCheckWithOutput (forAll arbitrary applicationOperatorDefinition)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

   Write a property for the definition of ~(.)~
   #+BEGIN_SRC haskell
   import Test.QuickCheck

   :{
   composeOperatorDefinition :: (Eq c, Eq b) => Blind (a -> b) -> Blind (b -> c) -> a -> Bool
   composeOperatorDefinition (Blind g) (Blind f) x = ((f . g) x) == (f (g x))
   :}

   <<quickcheck-with-output>>

   quickCheckWithOutput (forAll arbitrary composeOperatorDefinition)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

   Alternatively we can create a generator for the function
   #+BEGIN_SRC haskell
   import Test.QuickCheck

   :{
   applicationOperatorDefinition :: (Eq b) => Blind (a -> b) -> a -> Bool
   applicationOperatorDefinition (Blind f) x = (f x) == (f $ x)
   :}

   :{
   functionGenerator :: (Arbitrary b) => Gen (Blind (a -> b))
   functionGenerator = do
     b <- arbitrary
     return $ Blind (\_ -> b)
   :}

   <<quickcheck-with-output>>

   quickCheckWithOutput (forAll functionGenerator applicationOperatorDefinition)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

   NB: ~Blind~ is a /type-level modifier/ to modify the behavior of
   the generators, we need to tell /QuickCheck/ that we don't need to
   be in the ~Show~ class, this is needed here because functions (what
   we want to generate) cannot be in the ~Show~ class

9. See if the following functions are equal
   #+BEGIN_SRC haskell
   -- ? foldr (:) == (++)

   import Test.QuickCheck

   :{
   equalityProperty :: (Eq a, Num a) => [a] -> [a] -> Bool
   equalityProperty xs ys = (xs ++ ys) == (foldr (:) ys xs)
   :}

   <<quickcheck-with-output>>

   quickCheckWithOutput (forAll arbitrary equalityProperty)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

   #+BEGIN_SRC haskell
   -- ? foldr (++) [] == concat

   import Test.QuickCheck

   :{
   equalityProperty :: (Foldable t, Eq a) => t [a] -> Bool
   equalityProperty xs = (concat xs) == (foldr (++) [] xs)
   :}

   <<quickcheck-with-output>>

   quickCheckWithOutput (forAll arbitrary equalityProperty)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

10. Is that so?
    #+BEGIN_SRC haskell
    -- ? f n xs = length (take n xs) == n

    :{
    property :: NonNegative Int -> [a] -> Bool
    property (NonNegative n) xs = length (take n xs) == n
    :}

    <<quickcheck-with-output>>

    quickCheckWithOutput (forAll arbitrary property)
    #+END_SRC

    #+RESULTS:
    #+BEGIN_EXAMPLE
    ,*** Failed! Falsified (after 6 tests and 1 shrink):\nNonNegative {getNonNegative = 3}\n[]\n
    #+END_EXAMPLE

    It is not true when the length of the original list is less than ~n~

11. Test if the composition between ~read~ and ~show~ works
    #+BEGIN_SRC haskell
    -- ? (read . show) x == x

    :{
    property :: (Eq a, Show a, Read a) => a -> Bool
    property x = (read . show) x == x
    :}

    <<quickcheck-with-output>>

    quickCheckWithOutput (forAll arbitrary property)
    #+END_SRC

    #+RESULTS:
    #+BEGIN_EXAMPLE
    +++ OK, passed 100 tests.\n
    #+END_EXAMPLE

** Failure
Find out why for the following function
#+BEGIN_SRC haskell :eval never
square x = x * x
#+END_SRC

The following property does not hold
#+BEGIN_SRC haskell :eval never
squareIdentity x = (square . sqrt) x == x
#+END_SRC

#+BEGIN_SRC haskell :results replace output :wrap EXAMPLE :epilogue ":load" :post ghci-clean(content=*this*)
import Test.QuickCheck

:{
square :: (Num a) => a -> a
square x = x * x
:}

:{
squareIdentity :: (Eq a, Floating a) => NonNegative a -> Bool
squareIdentity (NonNegative x) = (square . sqrt) x == x
:}

:{
squareIdentity' :: (Ord a, Floating a) => NonNegative a -> Bool
squareIdentity' (NonNegative x) = abs (((square . sqrt) x) - x) <= 0.00001
:}

<<quickcheck-with-output>>

quickCheckWithOutput (forAll arbitrary squareIdentity)
quickCheckWithOutput (forAll arbitrary squareIdentity')
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
,*** Failed! Falsified (after 2 tests):\nNonNegative {getNonNegative = 0.5889743056546932}\n
+++ OK, passed 100 tests.\n
#+END_EXAMPLE

Because of the floating point representation you cannot compare
directly for equality you need to compare with a tolerance

** Idempotence
Use /QuickCheck/ to demonstrate idempotence for the following functions

#+NAME: idempotency-functions
#+BEGIN_SRC haskell :eval never
:{
twice :: (a -> a) -> a -> a
twice f = f . f
:}

:{
fourTimes :: (a -> a) -> a -> a
fourTimes = twice . twice
:}
#+END_SRC

1. Using the following function
   #+BEGIN_SRC haskell
   import Test.QuickCheck
   import Data.Char (toUpper)

   <<idempotency-functions>>

   :{
   capitalizeWord :: String -> String
   capitalizeWord "" = ""
   capitalizeWord (c:s) = (toUpper c) : s
   :}

   :{
   property :: String -> Bool
   property s =
     (capitalizeWord s == twice capitalizeWord s)
     &&
     (capitalizeWord s == fourTimes capitalizeWord s)
   :}

   <<quickcheck-with-output>>

   quickCheckWithOutput (forAll arbitrary property)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

2. Using the following function
   #+BEGIN_SRC haskell
   import Test.QuickCheck
   import Data.List (sort)

   <<idempotency-functions>>

   :{
   property :: (Ord a) => [a] -> Bool
   property xs =
     (sort xs == twice sort xs)
     &&
     (sort xs == fourTimes sort xs)
   :}

   <<quickcheck-with-output>>

   quickCheckWithOutput (forAll arbitrary property)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

** Make Generators for Datatypes

1. Equal probability for each
   #+BEGIN_SRC haskell
   data Fool = Fulse | Frue deriving (Eq, Show)

   :{
   instance Arbitrary Fool where
     arbitrary = elements [Fulse, Frue]
   :}

   sample (arbitrary :: Gen Fool)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   Fulse
   Frue
   Fulse
   Fulse
   Frue
   Fulse
   Fulse
   Frue
   Frue
   Fulse
   Fulse
   #+END_EXAMPLE

2. With 2/3s chance of ~Fulse~, 1/3 chance of ~Frue~.
   #+BEGIN_SRC haskell
   data Fool = Fulse | Frue deriving (Eq, Show)

   :{
   instance Arbitrary Fool where
     arbitrary = frequency [(2, return Fulse), (1, return Frue)]
   :}

   sample (arbitrary :: Gen Fool)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   Fulse
   Fulse
   Frue
   Fulse
   Frue
   Frue
   Fulse
   Frue
   Fulse
   Frue
   Frue
   #+END_EXAMPLE

** Hangman Testing

1. Test the function ~fillInCharacters~
   #+BEGIN_SRC haskell
   <<add-chapter-directory-in-path(chapter="chapter-013/hangman/src")>>
   :l Main

   import Test.Hspec

   :{
   hspec $ do
     describe "fillInCharacter" $ do
       it "should fill character when in word to guess" $ do
         let puzzle = Puzzle "foo" [Nothing, Nothing, Nothing] []
         let puzzleAfter = Puzzle "foo" [Nothing, Just 'o', Just 'o'] ['o']
         fillInCharacter puzzle 'o' `shouldBe` puzzleAfter
       it "should not fill character when not in word to guess" $ do
         let puzzle = Puzzle "foo" [Nothing, Nothing, Nothing] []
         let puzzleAfter = Puzzle "foo" [Nothing, Nothing, Nothing] ['h']
         fillInCharacter puzzle 'h' `shouldBe` puzzleAfter
   :}
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   [1 of 1] Compiling Main             ( /home/coder/code/haskellbook-exercises/chapter-013/hangman/src/Main.hs, interpreted )
   Ok, one module loaded.
   fillInCharacter
     should fill character when in word to guess
     should not fill character when not in word to guess

   Finished in 0.0004 seconds
   2 examples, 0 failures
   #+END_EXAMPLE

   A property testing alternative
   #+BEGIN_SRC haskell
   <<add-chapter-directory-in-path(chapter="chapter-013/hangman/src")>>

   :l Main
   import Data.Maybe (catMaybes)
   import Test.QuickCheck

   puzzleAlphabet = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"

   :{
   puzzleChar :: Gen Char
   puzzleChar = elements puzzleAlphabet
   :}

   :{
   puzzleWord :: Gen String
   -- puzzleWord = (listOf puzzleChar) `suchThat` (\w -> let l = length w in l > 0 && l < 10)
   puzzleWord = do
      l <- elements [1..9]
      vectorOf l puzzleChar
   :}

   :{
   instance Arbitrary Puzzle where
     arbitrary = do
       wordToGuess <- puzzleWord
       return $ createPuzzle wordToGuess
   :}

   :{
   monotoneCheck :: Puzzle -> Puzzle -> Bool
   monotoneCheck (Puzzle _ discoveredBefore guessedBefore) (Puzzle _ discoveredAfter guessedAfter) =
     (length guessedBefore <= length guessedAfter) &&
     (length (catMaybes discoveredBefore) <= length (catMaybes discoveredAfter))
   :}

   :{
   fillInCharacterIsMonotone :: Property
   fillInCharacterIsMonotone = forAll (arbitrary :: Gen Puzzle)
     (\p -> forAll puzzleChar
       (\c -> monotoneCheck p (fillInCharacter p c)))
   :}

   <<quickcheck-with-output>>

   quickCheckWithOutput fillInCharacterIsMonotone
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   [1 of 1] Compiling Main             ( /home/coder/code/haskellbook-exercises/chapter-013/hangman/src/Main.hs, interpreted )
   Ok, one module loaded.
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE


2. Test the function ~handleGuess~ (unfortunately we have messages
   printed on the stdout, maybe I will learn later how to remove
   that...)
   #+BEGIN_SRC haskell
   <<add-chapter-directory-in-path(chapter="chapter-013/hangman/src")>>
   :l Main

   import Test.Hspec

   :{
   hspec $ do
     describe "handleGuess" $ do
       it "should fill charater when in word to guess" $ do
         let puzzle = Puzzle "foo" [Nothing, Nothing, Nothing] []
         let expected = Puzzle "foo" [Nothing, Just 'o', Just 'o'] ['o']
         result <- handleGuess puzzle 'o'
         result `shouldBe` expected
       it "should not fill charater when not in word to guess" $ do
         let puzzle = Puzzle "foo" [Nothing, Nothing, Nothing] []
         let expected = Puzzle "foo" [Nothing, Nothing, Nothing] ['h']
         result <- handleGuess puzzle 'h'
         result `shouldBe` expected
       it "should not record a guess if already guessed" $ do
         let puzzle = Puzzle "foo" [Nothing, Nothing, Nothing] ['h']
         let expected = Puzzle "foo" [Nothing, Nothing, Nothing] ['h']
         result <- handleGuess puzzle 'h'
         result `shouldBe` expected
   :}
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   [1 of 1] Compiling Main             ( /home/coder/code/haskellbook-exercises/chapter-013/hangman/src/Main.hs, interpreted )
   Ok, one module loaded.
   handleGuess
   Your guess was: o
   You guessed right!
     should fill charater when in word to guess
   Your guess was: h
   You guessed wrong! Try again ;-)
     should not fill charater when not in word to guess
   Your guess was: h
   You already guessed that character, pick something else...
     should not record a guess if already guessed

   Finished in 0.0031 seconds
   3 examples, 0 failures
   #+END_EXAMPLE

** Validating Ciphers
#+BEGIN_SRC haskell :eval never
<<add-chapter-directory-in-path(chapter="chapter-011")>>
:l Cipher

import Test.QuickCheck

alphabet = "abcdefghjkilmnopqrstuvwxyz"

:{
wordGenerator :: Gen String
wordGenerator = do
  n <- elements [2..6]
  vectorOf n (elements alphabet)
:}

:{
shiftGenerator :: Gen Int
shiftGenerator = elements [0..(length alphabet - 1)]
:}

:{
caesarRoundTrip :: Int -> String -> Bool
caesarRoundTrip n s = (caesarDecode alphabet n . caesarEncode alphabet n) s == s
:}

:{
vigenereRoundTrip :: String -> String -> Bool
vigenereRoundTrip k s = (vigenereDecode alphabet k . vigenereEncode alphabet k) s == s
:}

<<quickcheck-with-output>>

:{
quickCheckWithOutput (
  forAll shiftGenerator (\n ->
    forAll wordGenerator (\w ->
      caesarRoundTrip n w)))
:}

:{
quickCheckWithOutput (
  forAll wordGenerator (\keyword ->
    forAll wordGenerator (\word ->
      vigenereRoundTrip keyword word)))
:}
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
+++ OK, passed 100 tests.\n
+++ OK, passed 100 tests.\n
#+END_EXAMPLE
