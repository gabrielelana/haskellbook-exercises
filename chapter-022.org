# -*- eval: (org-babel-lob-ingest "./ob-haskell-common.org"); -*-

#+TITLE: Reader

#+PROPERTY: header-args:haskell :results replace output
#+PROPERTY: header-args:haskell+ :noweb yes
#+PROPERTY: header-args:haskell+ :wrap EXAMPLE

* 22.01 Reader
When writing applications sometimes we need to pass around information
that we need in many functions. Add an argument to every function that
needs that data or needs to pass that data around is not convenient
and it will make code less readable. To address this problem we use
~Reader~.

* 22.02 A New Beginning

#+NAME: function-functor
#+BEGIN_SRC haskell :results silent
-- was only
-- boop = (*2)
:{
boop :: Num a => a -> a
boop = (*2)
:}

-- was only
-- doop = (+10)
:{
doop :: Num a => a -> a
doop = (+10)
:}

-- was
-- bip :: Integer -> Integer
-- bip = boop . doop
:{
bip :: Num a => a -> a
bip = boop . doop
:}

:{
bip' :: Num a => a -> a
bip' = fmap boop doop
:}
#+END_SRC

We already know that but a function ~((->) a)~ it's a functorial
structure and as so we can lift other functions over it, by lifting we
are able to let a function (~boop~ in the above example) to reach the
result of another function (~doop~ in the above example) that is the
functorial structure.

#+NAME: function-applicative
#+BEGIN_SRC haskell :results silent
<<function-functor>>

:{
bbop :: Integer -> Integer
bbop = (+) <$> boop <*> doop
:}

:{
bbop' :: Integer -> Integer
bbop' = Control.Applicative.liftA2 (+) boop doop
:}
#+END_SRC

With ~Applicative~ we are able to compose those functions (applicative
structure) so that they will be applied to the same argument in
parallel (conceptually in parallel) and the results will be added
together. Therefore we can operate on the result of a multiple
function application as long as those functions take the same
argument.

#+NAME: function-monad
#+BEGIN_SRC haskell :results silent
<<function-applicative>>

:{
bbbop :: Integer -> Integer
bbbop = do
  a <- boop
  b <- doop
  return $ a + b
:}
#+END_SRC

With ~Monad~ we are able to do the same as with ~Applicative~.

We have seen here ~Functor~, ~Applicative~ and ~Monad~ for partially
applied functions. In all cases the result is awaiting application to
one argument that will allow both functions to be evaluated.

This is the idea of ~Reader~. It is a way of composing functions
together when all those functions are awaiting one input from a shared
environment.

** Short Exercise

#+BEGIN_SRC haskell :results silent
import Data.Char

:{
cap :: [Char] -> [Char]
cap = fmap toUpper
:}

:{
rev :: [Char] -> [Char]
rev = reverse
:}

-- Implement the following
-- composed :: [Char] -> [Char]
-- composed = undefined
:{
composed :: [Char] -> [Char]
composed = cap . reverse
:}

-- Implement the following
-- fmapped :: [Char] -> [Char]
-- fmapped = undefined
:{
fmapped :: [Char] -> [Char]
fmapped = fmap cap reverse
:}

composed "Julie" == "EILUJ"
fmapped "Chris" == "SIRHC"

-- Implement the following
-- tupled :: [Char] -> ([Char], [Char])
-- tupled = undefined
:{
tupled :: [Char] -> ([Char], [Char])
tupled = (,) <$> cap <*> rev
:}

:{
tupled' :: [Char] -> ([Char], [Char])
tupled' = Control.Applicative.liftA2 (,) cap rev
:}

-- Implement the same function in monadic style
:{
tupled'' :: [Char] -> ([Char], [Char])
tupled'' = do
  a <- cap
  b <- rev
  return (a, b)
:}

-- Implement the same function in monadic style desugared
:{
tupled''' :: [Char] -> ([Char], [Char])
tupled''' = cap >>= (\a -> rev) >>= (\b -> (a, b)))
:}
#+END_SRC

* 22.03 This is Reader
The term ~Reader~ is referred to the ~Monad~ instance of ~Reader~.

* 22.04 Breaking Down The Functor Of Functions
The instance of ~Functor~ for ~((->) a)~ is function composition

#+BEGIN_SRC haskell :eval never
(.) :: (b -> c) -> (a -> b) -> a -> c
-- the same as
(.) :: (b -> c) -> (a -> b) -> (a -> c)

Functor f => (<$>) :: (a -> b) -> f a -> f b
-- same as
Functor f => (<$>) :: (b -> c) -> f b -> f c
-- since (f) in our case is ((->) a)
(<$>) :: (b -> c) -> (a -> b) -> (a -> c)

-- put them side by side
(.)   :: (b -> c) -> (a -> b) -> (a -> c)
(<$>) :: (b -> c) -> (a -> b) -> (a -> c)
--
#+END_SRC

* 22.05 Reader?

#+NAME: reader
#+BEGIN_SRC  haskell :results silent
newtype Reader r a = Reader { runReader :: r -> a }
#+END_SRC

The ~r~ is the type we are reading in
The ~a~ is the type output of our function

The ~Functor~ instance as expected is function composition with a
little bit of overlay structure.

#+BEGIN_SRC haskell :eval never
:{
instance Functor (Reader r) where
  f <$> (Reader ra) = Reader $ \r -> f (ra r)
:}
#+END_SRC

Which is exactly the same as

#+BEGIN_SRC haskell :eval never
:{
instance Functor (Reader r) where
  f <$> (Reader ra) = Reader $ f . ra
:}
#+END_SRC

** Exercise: Ask

Implement the following function

#+BEGIN_SRC haskell :results silent
<<reader>>

:{
ask :: Reader a a
ask = Reader id
:}
#+END_SRC

* 22.06 The Applicative of Functions
As we already saw, functions have an instance of ~Applicative~

#+BEGIN_SRC haskell :results silent
data Person = Person { height :: Int, weight :: Int } deriving (Eq, Show)

:{
square :: Int -> Int
square x = x * x
:}

:{
calculateBMI :: Person -> Rational
calculateBMI = (/) <$> (toRational . height) <*> (toRational . square . weight)
:}
#+END_SRC

/Reader/ is not always ~Reader~ sometimes it's the ambient
~Applicative~ or ~Monad~ associated with the partially applied
function (~((->) r)~)

** Exercise: Reading Comprehension

1. Write ~liftA2~ yourself

   #+BEGIN_SRC haskell :results silent
   :{
   liftA2' :: Applicative f => (a -> b -> c) -> f a -> f b -> f c
   liftA2' f fa fb = f <$> fa <*> fb
   :}
   #+END_SRC

2. Write the following function

   #+BEGIN_SRC haskell :results silent
   <<reader>>

   :{
   asks :: (r -> a) -> Reader r a
   asks = Reader
   :}
   #+END_SRC

3. Implement ~Applicative~ for ~Reader~

   #+NAME: reader-applicative
   #+BEGIN_SRC haskell :results silent
   <<reader>>

   :{
   instance Functor (Reader r) where
     fmap f (Reader fa) = Reader $ f . fa
   :}

   :{
   instance Applicative (Reader r) where
     pure = Reader . const

     -- f (a -> b) -> f a -> f b
     -- (r -> a -> b) -> (r -> a) -> (r -> b)
     -- (Reader ff) <*> (Reader fa) = Reader $ \r -> ff r (fa r)
     (Reader ff) <*> (Reader fa) = Reader $ ff <*> fa
   :}
   #+END_SRC

* 22.07 The Monad of Functions
As we already saw, functions have an instance of ~Monad~

#+BEGIN_SRC haskell :results silent
:{
sumTuple2 :: (Int, Int) -> Int
sumTuple2 = do
  a <- fst
  b <- snd
  return $ a + b
:}

:{
sumTuple2' :: (Int, Int) -> Int
sumTuple2' = fst >>= (\a -> snd >>= (\b -> return $ a + b))
:}

sumTuple2 (1, 3)
sumTuple2' (1, 3)
#+END_SRC

** Exercise: Reader Monad

1. Implement the ~Reader~ ~Monad~

   #+NAME: reader-monad
   #+BEGIN_SRC haskell :results silent
   <<reader-applicative>>

   :{
   instance Monad (Reader r) where
     -- m a -> (a -> m b) -> m b
     -- (Reader (r -> a)) -> (a -> Reader (r -> b)) -> Reader (r -> b)
     Reader ra >>= fb = Reader $ \r -> runReader (fb (ra r)) r
   :}
   #+END_SRC

2. Rewrite the monadic ~getDogRM~ to use your Reader datatype

   #+BEGIN_SRC haskell :results silent
   <<reader-monad>>

   newtype HumanName = HumanName String deriving (Eq, Show)

   newtype DogName = DogName String deriving (Eq, Show)

   newtype Address = Address String deriving (Eq, Show)

   :{
   data Person = Person { humanName :: HumanName
                        , dogName   :: DogName
                        , address   :: Address
                        } deriving (Eq, Show)
   :}

   :{
   data Dog = Dog { dogsName    :: DogName
                  , dogsAddress :: Address
                  } deriving (Eq, Show)
   :}

   :{
   getDogRM :: Person -> Dog
   getDogRM = do
     name <- dogName
     addy <- address
     return $ Dog name addy
   :}

   :{
   getDogName :: Reader Person DogName
   getDogName = Reader dogName
   :}

   :{
   getAddress :: Reader Person Address
   getAddress = Reader address
   :}

   :{
   getDogRM' :: Reader Person Dog
   getDogRM' = do
     name <- getDogName
     addy <- getAddress
     return $ Dog name addy
   :}
   #+END_SRC

* 22.08 Reader Monad by Itself is Boring
...

* 22.09 You Can Only Change what Comes Below
...

* 22.10 You Tend to see ReaderT not Reader in Code
...

* 22.11 Exercises

#+NAME: part-1
#+BEGIN_SRC haskell :results silent
import Control.Applicative
import Data.Maybe

x = [1, 2, 3]
y = [4, 5, 6]
z = [7, 8, 9]
#+END_SRC

#+NAME: part-2
#+BEGIN_SRC haskell :results silent
<<part-1>>

:{
xs :: Maybe Integer
xs = lookup 3 $ zip x y
:}

:{
ys :: Maybe Integer
ys = lookup 6 $ zip y z
:}

:{
zs :: Maybe Integer
zs = lookup 4 $ zip x y
:}

:{
z' :: Integer -> Maybe Integer
z' n = lookup n $ zip x z
:}

-- tuple of xs and ys
:{
x1 :: Maybe (Integer, Integer)
x1 = liftA2 (,) xs ys
:}

-- tuple of ys and zs
:{
x2 :: Maybe (Integer, Integer)
x2 = liftA2 (,) ys zs
:}

-- tuple of two applications of z'
:{
x3 :: Integer -> (Maybe Integer, Maybe Integer)
x3 n = let x = z' n in (x, x)
:}

x1 == Just (6, 9)
x2 == Nothing
x3 3 == (Just 9, Just 9)
#+END_SRC

#+NAME: part-3
#+BEGIN_SRC haskell :results silent
<<part-2>>

-- summed is uncurry with addition as the first argument
:{
summed :: Num a => (a, a) -> a
summed = uncurry (+)
:}

-- lift a Boolean function over two partially applied functions
-- use && >3 <8
:{
bolt :: Integer -> Bool
bolt = liftA2 (&&) (>3) (<8)
:}

(summed <$> ((,) <$> xs <*> ys)) == (Just 15)
fmap summed ((,) <$> xs <*> zs) == Nothing
bolt 7 == True
fmap bolt z == [True, False, False]
#+END_SRC

#+NAME: part-4
#+BEGIN_SRC haskell :results silent
<<part-3>>

-- (Traversable t, Applicative f) => t (f a) -> f (t a)
-- In this case the Traversable is a list and Applicative is ((->) r)
-- So in the end we have a function waiting for a number (7)
sequenceA [(>3), (<8), even] 7

:{
sequA :: Integral a => a -> [Bool]
sequA = sequenceA [(>3), (<8), even]
:}

s' = summed <$> ((,) <$> xs <*> ys)
#+END_SRC

1. Fold the boolean conjunction operator over the list of results of
   ~sequA~ (applied to some value)

   #+BEGIN_SRC haskell :results silent
   <<part-4>>

   f = getAll . foldMap All . sequA

   f 7 == False
   f 6 == True
   #+END_SRC

2. Apply ~sequA~ to ~s'~

   #+BEGIN_SRC haskell :results silent
   <<part-4>>

   sequA <$> s'
   #+END_SRC

3. Apply ~bolt~ to ~ys~

   #+BEGIN_SRC haskell :results silent
   <<part-4>>

   bolt <$> ys
   #+END_SRC
