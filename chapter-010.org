* 10.01 Folds
  - Folds as a general concept are called catamorphisms (/cata/ means
    /down/ and /morphism/ means /transformation/)
  - If the spine of a list is the structure of a list then a fold is
    what reduce that structure

* 10.02 Bringing you into the fold
  Before GHC 7.6 ~foldr~ (fold right) was defined as
  #+BEGIN_SRC haskell :eval never
  foldr :: (a -> b -> b) -> b -> [a] -> b
  #+END_SRC

  Then it got replaced with a more general
  #+BEGIN_SRC haskell :eval never
  foldr :: Foldable t => (a -> b -> b) -> b -> t a -> b
  #+END_SRC

  With which we can implement the list version using ~[]~ as a type
  constructor, because ~[]~ is ~Foldable~ along with many others.

* 10.03 Recursive pattern
  We have seen the same pattern, over and over again to reduce lists
  #+BEGIN_SRC haskell :eval never
  sum :: [a] -> a
  sum [] = 0
  sum (x:xs) = x + sum xs
  #+END_SRC

  - The base case is the identity for that function
  - There's a main function with a recursive pattern that associates
    to the right (~x + (sum xs)~ the parentheses groups items on the
    right)

* 10.04 Fold right
  We call ~foldr~ "Fold right" because the fold is right associative
  #+BEGIN_SRC haskell :eval never
  foldr :: (a -> b -> b) -> b -> [a] -> b
  foldr f z [] = z
  foldr f z (x:xs) = f x (foldr f z xs)
  #+END_SRC

  Example of execution
  #+BEGIN_EXAMPLE
  foldr (+) 0 [1, 2, 3]
  (+) 1 (foldr (+) 0 [2, 3])
  (+) 1 ((+) 2 (foldr (+) 0 [3]))
  (+) 1 ((+) 2 ((+) 3 (foldr (+) 0 [])))
  (+) 1 ((+) 2 ((+) 3 0))
  (+) 1 ((+) 2 3)
  (+) 1 5
  6
  #+END_EXAMPLE

  - Folding happens in two stages: /traversing/ and /folding/
    - /Traversing/ is the stage in which the fold recurses over the spine.
    - /Folding/ is the stage of the evaluation or reduction of the
      function over the values.

  - Given this two stage evaluation and lazyness if the reduce
    function doesn't need to evalute the second argument (aka the rest
    of the fold) then the evaluation can stop at the first step.

  - The above reduction traverses all the spine of the list and
    evaluates all the values because ~(+)~ is strict on both
    arguments. For that ~foldr~ can be used on potentially infinite
    foldable data structures.
    #+BEGIN_SRC haskell :results output :wrap EXAMPLE :epilogue ":load" :post ghci-clean(content=*this*)
    :{
    myAny :: (a -> Bool) -> [a] -> Bool
    myAny f xs = foldr (\x b -> f x || b) False xs
    :}
    myAny even [1..]
    #+END_SRC

    #+RESULTS:
    #+BEGIN_EXAMPLE
    True
    #+END_EXAMPLE

  - Another term we use for this never-ending evaluation is /bottom/
    or /undefined/

  - If the function we give to ~foldr~ doesn't use the values of the
    list then we can have ~undefined~ in the list
    #+BEGIN_SRC haskell :results output :wrap EXAMPLE :epilogue ":load" :post ghci-clean(content=*this*)
    foldr (\_ _ -> 42) undefined [undefined]
    #+END_SRC

    #+RESULTS:
    #+BEGIN_EXAMPLE
    42
    #+END_EXAMPLE

    The above will not traverse the spine nor evaluates the arguments,
    the one below will traverse the spine but it will not evaluate the
    arguments. NOTE: we need the default value to be not ~undefined~
    #+BEGIN_SRC haskell :results output :wrap EXAMPLE :epilogue ":load" :post ghci-clean(content=*this*)
    foldr (\_ n -> n + 1) 0 [undefined, undefined]
    #+END_SRC

    #+RESULTS:
    #+BEGIN_EXAMPLE
    2
    #+END_EXAMPLE

* 10.05 Fold left
  We call ~foldl~ "Fold left" because the fold is left associative
  #+BEGIN_SRC haskell :eval never
  foldl :: (b -> a -> b) -> b -> [a] -> b
  foldl f acc [] = acc
  foldl f acc (x:xs) = foldl f (f acc x) xs
  #+END_SRC

  Example of execution
  #+BEGIN_EXAMPLE
  foldl (+) 0 [1, 2, 3]
  foldl (+) ((+) 1 0) [2, 3]
  foldl (+) ((+) 2 ((+) 1 0)) [3]
  foldl (+) ((+) 3 ((+) 2 ((+) 1 0))) []
  (+) 3 ((+) 2 ((+) 1 0))
  (+) 3 ((+) 2 1)
  (+) 3 3
  6
  #+END_EXAMPLE

  The result is the same as ~foldl~ but only because the operation
  ~(+)~ is associative, if the operation/function is not then there's
  a big difference
  #+BEGIN_SRC haskell :results output :wrap EXAMPLE :epilogue ":load" :post ghci-clean(content=*this*)
  foldr (^) 2 [1, 2, 3]
  foldl (^) 2 [1, 2, 3]
  #+END_SRC

  #+RESULTS:
  #+BEGIN_EXAMPLE
  1
  64
  #+END_EXAMPLE

  Execution of ~foldr~
  #+BEGIN_EXAMPLE
  foldr (^) 2 [1, 2, 3]
  (^) 1 (foldr (^) 2 [2, 3])
  (^) 1 ((^) 2 (foldr (^) 2 [3]))
  (^) 1 ((^) 2 ((^) 3 (foldr (^) 2 [])))
  (^) 1 ((^) 2 ((^) 3 2))
  (^) 1 512
  1
  #+END_EXAMPLE

  Execution of ~foldl~
  #+BEGIN_EXAMPLE
  foldl (^) 2 [1, 2, 3]
  foldl (^) ((^) 2 1) [2, 3]
  foldl (^) ((^) ((^) 2 1) 2) [3]
  foldl (^) ((^) ((^) ((^) 2 1) 2) 3) []
  ((^) ((^) ((^) 2 1) 2) 3)
  ((^) ((^) 2 2) 3)
  ((^) 4 3)
  64
  #+END_EXAMPLE

  Sometimes you have to use ~flip~ with ~foldl~ or with ~foldr~
  #+BEGIN_SRC haskell :results output :wrap EXAMPLE :epilogue ":load" :post ghci-clean(content=*this*)
  foldr (:) [] [1, 2, 3]
  foldl (:) [] [1, 2, 3]
  foldl (flip (:)) [] [1, 2, 3]
  #+END_SRC

  #+RESULTS:
  #+BEGIN_EXAMPLE
  [1,2,3]
  <interactive>:1513:7: error:
      • Occurs check: cannot construct the infinite type: a ~ [a]
        Expected type: [a] -> [a] -> [a]
          Actual type: a -> [a] -> [a]
      • In the first argument of ‘foldl’, namely ‘(:)’
        In the expression: foldl (:) [] [1, 2, 3]
        In an equation for ‘it’: it = foldl (:) [] [1, 2, 3]
      • Relevant bindings include
          it :: [a] (bound at <interactive>:1513:1)
  [3,2,1]
  #+END_EXAMPLE

** Exercises: Understanding folds

   1. The following code will return the same sult as which of the
      following?
      #+BEGIN_SRC haskell :results none
      foldr (*) 1 [1..5]
      #+END_SRC

      All of them because ~(*)~ is associative and commutative

   2. Write out the evaluation steps for
      #+BEGIN_SRC haskell :results none
      foldl (flip (*)) 1 [1..3]
      #+END_SRC

      #+BEGIN_EXAMPLE
      foldl (flip (*)) 1 [1, 2, 3]
      foldl (flip (*)) ((flip (*)) 1 1) [2, 3]
      foldl (flip (*)) ((flip (*)) ((flip (*)) 1 1) 2) [3]
      foldl (flip (*)) ((flip (*)) ((flip (*)) ((flip (*)) 1 1) 2) 3) []
      (flip (*)) ((flip (*)) ((flip (*)) 1 1) 2) 3
      (flip (*)) ((flip (*)) 1 2) 3
      (flip (*)) 2 3
      6
      #+END_EXAMPLE

   3. One difference between ~foldr~ and ~foldl~ is: (c) ~foldr~ but
      not ~foldl~ is associative to the right

   4. Folds are /catamorphisms/, which means they are generally used
      to (a) reduce structure

   5. The following folds have at least one error, fix it

      1. Fix the errors in
         #+BEGIN_SRC haskell :results none
         foldr (++) ["woot", "WOOT", "woot"]
         #+END_SRC

         There's no zero value
         #+BEGIN_SRC haskell :results none
         foldr (++) "" ["woot", "WOOT", "woot"]
         #+END_SRC

      2. Fix the errors in
         #+BEGIN_SRC haskell :results none
         foldr max [] "fear is the little death"
         #+END_SRC

         Wrong zero value, must be a ~Char~
         #+BEGIN_SRC haskell :results none
         foldr max 'a' "fear is the little death"
         #+END_SRC

      3. Fix the errors in
         #+BEGIN_SRC haskell :results none
         foldr and True [False, True]
         #+END_SRC

         Wrong function, ~and~ operates on ~Foldable t => Bool~ we
         need something that operates on ~Bool~
         #+BEGIN_SRC haskell :results none
         foldr (&&) True [False, True]
         #+END_SRC

      4. Fix the errors in
         #+BEGIN_SRC haskell :results none
         foldr (||) True [False, True]
         #+END_SRC

         This is not wrong per se but the default/zero value is not
         good because that ~foldr~ will always return ~True~. A more
         useful thing would be to have ~False~ as default/zero value
         so to implement ~or~
         #+BEGIN_SRC haskell :results none
         foldr (||) False [False, True]
         #+END_SRC

      5. Fix the errors in
         #+BEGIN_SRC haskell :results none
         foldl ((++) . show) "" [1..5]
         #+END_SRC

         It doesn't work because the function taken by ~foldl~ takes
         as first argument the accumulator and not one of the values
         from the list (which requires the ~show~)
         #+BEGIN_SRC haskell :results none
         foldl (flip ((++) .show)) "" [1..5]
         #+END_SRC

      6. Fix the errors in
         #+BEGIN_SRC haskell :results none
         foldr const 'a' [1..5]
         #+END_SRC

         The reduction function have type ~a -> b -> a~ and the type
         of the reduction function to give to ~foldr~ must be ~a -> b
         -> b~ then ~a~ must be equal to ~b~ and it cannot be because
         ~b~ is ~Char~ and ~a~ is ~Num a => a~
         #+BEGIN_SRC haskell :results none
         foldr const 1 [1..5]
         #+END_SRC

      7. Fix the errors in
         #+BEGIN_SRC haskell :results none
         foldr const 0 "tacos"
         #+END_SRC

         Same as the above
         #+BEGIN_SRC haskell :results none
         foldr const 'a' "tacos"
         #+END_SRC

      8. Fix the errors in
         #+BEGIN_SRC haskell :results none
         foldl (flip const) 0 "burritos"
         #+END_SRC

         The type of ~flip const~ is ~b -> a -> a~ the expected type
         is ~b -> a -> b~ so ~b~ must be the same as ~a~ and that's
         the problem because ~Char~ is not the same ad ~Num a => a~
         #+BEGIN_SRC haskell :results none
         foldl (flip const) 'a' "burritos"
         #+END_SRC

      9. Fix the errors in
         #+BEGIN_SRC haskell :results none
         foldl const 'z' [1..5]
         #+END_SRC

         Same as the above
         #+BEGIN_SRC haskell :results none
         foldl (flip const) 0 [1..5]
         #+END_SRC

* 10.06 How to write fold functions
  Nothing much.

** Exercise: Database Processing

   Complete the following code
   #+NAME: Database
   #+BEGIN_SRC haskell :eval never :tangle chapter-010/Database.hs
   module Database where

   import Data.Time

   data DatabaseItem = DbString String
                     | DbNumber Integer
                     | DbDate   UTCTime
                     deriving (Eq, Ord, Show)

   theDatabase :: [DatabaseItem]
   theDatabase =
     [ DbDate (UTCTime (fromGregorian 1911 5 1) (secondsToDiffTime 34123))
     , DbNumber 9001
     , DbString "Hello, world!"
     , DbDate (UTCTime (fromGregorian 1921 5 1) (secondsToDiffTime 34123))
     ]
   #+END_SRC

   1. Write a function that filters for DbDate values and returns a
      list of the UTCTime values inside them.
      #+NAME: Database
      #+BEGIN_SRC haskell :eval never :tangle chapter-010/Database.hs
      filterDbDate :: [DatabaseItem] -> [UTCTime]
      filterDbDate db = foldr accumulateDates [] db
        where accumulateDates item times =
                case item of
                  DbDate time -> time : times
                  _ -> times
      #+END_SRC

      #+BEGIN_SRC haskell :results output :noweb yes :wrap EXAMPLE :epilogue ":load" :post start-at-line(content=*this*, line=4)
      <<add-current-chapter-directory-in-path()>>
      :load Database
      filterDbDate theDatabase
      #+END_SRC

      #+RESULTS:
      #+BEGIN_EXAMPLE
      [1911-05-01 09:28:43 UTC,1921-05-01 09:28:43 UTC]
      #+END_EXAMPLE

   2. Write a function that filters for DbNumber values and returns a
      list of the Integer values inside them.
      #+NAME: Database
      #+BEGIN_SRC haskell :eval never :tangle chapter-010/Database.hs
      filterDbNumber :: [DatabaseItem] -> [Integer]
      filterDbNumber db = foldr accumulateNumbers [] db
        where accumulateNumbers item numbers =
                case item of
                  DbNumber n -> n : numbers
                  _ -> numbers
      #+END_SRC

      #+BEGIN_SRC haskell :results output :noweb yes :wrap EXAMPLE :epilogue ":load" :post start-at-line(content=*this*, line=4)
      <<add-current-chapter-directory-in-path()>>
      :load Database
      filterDbNumber theDatabase
      #+END_SRC

      #+RESULTS:
      #+BEGIN_EXAMPLE
      [9001]
      #+END_EXAMPLE

   3. Write a function that gets the most recent date.
      #+NAME: Database
      #+BEGIN_SRC haskell :eval never :tangle chapter-010/Database.hs
      mostRecent :: [DatabaseItem] -> UTCTime
      mostRecent = maximum . filterDbDate
      #+END_SRC

      #+BEGIN_SRC haskell :results output :noweb yes :wrap EXAMPLE :epilogue ":load" :post start-at-line(content=*this*, line=4)
      <<add-current-chapter-directory-in-path()>>
      :load Database
      mostRecent theDatabase
      #+END_SRC

      #+RESULTS:
      #+BEGIN_EXAMPLE
      1921-05-01 09:28:43 UTC
      #+END_EXAMPLE

   4. Write a function that sums all of the DbNumber values.
      #+NAME: Database
      #+BEGIN_SRC haskell :eval never :tangle chapter-010/Database.hs
      sumDb :: [DatabaseItem] -> Integer
      sumDb = sum . filterDbNumber
      #+END_SRC

      #+BEGIN_SRC haskell :results output :noweb yes :wrap EXAMPLE :epilogue ":load" :post start-at-line(content=*this*, line=4)
      <<add-current-chapter-directory-in-path()>>
      :load Database
      sumDb theDatabase
      #+END_SRC

      #+RESULTS:
      #+BEGIN_EXAMPLE
      9001
      #+END_EXAMPLE

   5. Write a function that gets the average of the DbNumber values.
      #+NAME: Database
      #+BEGIN_SRC haskell :eval never :tangle chapter-010/Database.hs
      avgDb :: [DatabaseItem] -> Double
      avgDb theDatabase = (fromIntegral (sum numbers)) / (fromIntegral (length numbers))
        where numbers = (filterDbNumber theDatabase)
      #+END_SRC

      #+BEGIN_SRC haskell :results output :noweb yes :wrap EXAMPLE :epilogue ":load" :post start-at-line(content=*this*, line=4)
      <<add-current-chapter-directory-in-path()>>
      :load Database
      avgDb theDatabase
      #+END_SRC

      #+RESULTS:
      #+BEGIN_EXAMPLE
      9001.0
      #+END_EXAMPLE

* 10.07 Folding and evaluation
  Nothing much

* 10.08 Summary
  - ~foldr~
    - Associates to the right
    - Works on infinite lists
    - A good default choice to transform data structures
  - ~foldl~
    - Associates to the left
    - Cannot be used with infinite lists
    - Probably you want to use ~foldl'~ instead

* 10.09 Scans

  #+BEGIN_SRC haskell :results output :wrap EXAMPLE :epilogue ":load"
  :t foldr
  :t foldl
  :t scanr
  :t scanl
  #+END_SRC

  #+RESULTS:
  #+BEGIN_EXAMPLE
  foldr :: Foldable t => (a -> b -> b) -> b -> t a -> b
  foldl :: Foldable t => (b -> a -> b) -> b -> t a -> b
  scanr :: (a -> b -> b) -> b -> [a] -> [b]
  scanl :: (b -> a -> b) -> b -> [a] -> [b]
  #+END_EXAMPLE

  - The reduce function is the same as ~fold*~
  - The traversal of the spine is the same as ~fold*~
  - They are not catamorphisms in the sense that they not fold
  - Always returns a list of intermediate results of folding so far
  - Unfortunately ~scan*~ works only on lists and not on generic ~Foldable~ things

  #+BEGIN_SRC haskell :results output :wrap EXAMPLE :epilogue ":load"
  scanr (+) 0 [1..3]
  scanl (+) 0 [1..3]
  #+END_SRC

  #+RESULTS:
  #+BEGIN_EXAMPLE
  [6,5,3,0]
  [0,1,3,6]
  #+END_EXAMPLE

  Implementation of ~scanr~
  #+BEGIN_SRC haskell :results output :wrap EXAMPLE :epilogue ":load" :post ghci-clean(content=*this*)
  :{
  scanr :: (a -> b -> b) -> b -> [a] -> [b]
  scanr _ z [] = [z]
  scanr f z (x:xs) = (f x (head rest)) : rest
    where rest = scanr f z xs
  :}
  scanr (+) 0 [1..3]
  #+END_SRC

  #+RESULTS:
  #+BEGIN_EXAMPLE
  [6,5,3,0]
  #+END_EXAMPLE

  Implementation of ~scanl~
  #+BEGIN_SRC haskell :results output :wrap EXAMPLE :epilogue ":load" :post ghci-clean(content=*this*)
  :{
  scanl :: (b -> a -> b) -> b -> [a] -> [b]
  scanl _ z [] = [z]
  scanl f z (x:xs) = z : (scanl f (f z x) xs)
  :}
  scanl (+) 0 [1..3]
  #+END_SRC

  #+RESULTS:
  #+BEGIN_EXAMPLE
  [0,1,3,6]
  #+END_EXAMPLE

  Example of execution of ~scanr~
  #+BEGIN_EXAMPLE
  scanr (+) 0 [1, 2, 3]
  1 + (head (scanr (+) 0 [2, 3])) : (scanr (+) 0 [2, 3])
  1 + (head (2 + (head (scanr (+) 0 [3])) : (scanr (+) [3]))) : (2 + (head (scanr (+) 0 [3])) : (scanr (+) [3]))
  1 + (head (2 + (head (3 + (head (scanr (+) 0 [])) : (scanr (+) 0 []))) : (3 + (head (scanr (+) 0 [])) : (scanr (+) 0 [])))) : (2 + (head (3 + (head (scanr (+) 0 [])) : (scanr (+) 0 []))) : (3 + (head (scanr (+) 0 [])) : (scanr (+) 0 []))
  1 + (head (2 + (head (3 + (head [0]) : [0])) : (3 + (head [0]) : [0]))) : (2 + (head (3 + (head [0]) : [0])) : (3 + (head [0]) : [0]))
  1 + (head (2 + (head (3 + 0 : [0])) : (3 + 0 : [0]))) : (2 + (head (3 + 0 : [0])) : (3 + 0 : [0]))
  1 + (head (2 + (head (3 : [0])) : (3 : [0]))) : (2 + (head (3 : [0])) : (3 : [0]))
  1 + (head (2 + (head ([3, 0])) : ([3, 0]))) : (2 + (head ([3, 0])) : ([3, 0]))
  1 + (head (2 + 3 : ([3, 0]))) : (2 + 3 : ([3, 0]))
  1 + (head (5 : ([3, 0]))) : (5 : ([3, 0]))
  1 + (head ([5, 3, 0])) : [5, 3, 0]
  1 + 5 : [5, 3, 0]
  6 : [5, 3, 0]
  [6, 5, 3, 0]
  #+END_EXAMPLE

  With ~scanl~ we can obtain an infinite list of fibonacci numbers
  #+NAME: fibs
  #+BEGIN_SRC haskell :eval never
  fibs = 1 : scanl (+) 1 fibs
  #+END_SRC

  #+BEGIN_SRC haskell :results output :noweb yes :wrap EXAMPLE :epilogue ":load" :post ghci-clean(content=*this*)
  <<fibs>>
  take 10 fibs
  fibs !! 9
  #+END_SRC

  #+RESULTS:
  #+BEGIN_EXAMPLE
  [1,1,2,3,5,8,13,21,34,55]
  55
  #+END_EXAMPLE

** Exercises: Scans

   1. Modify your fibs function to only return the first 20 Fibonacci
      numbers.
      #+BEGIN_SRC haskell :results none :noweb yes
      <<fibs>>
      take 20 fibs
      #+END_SRC

   2. Modify fibs to return the Fibonacci numbers that are less
      than 100.
      #+BEGIN_SRC haskell :results none :noweb yes
      <<fibs>>
      takeWhile (<100) fibs
      #+END_SRC

   3. Try to write the factorial function from recursion chapter as a
      scan. You’ll want ~scanl~ again, and your start value will
      be 1. Warning: this will also generate an infinite list, so you
      may want to pass it through a take function or similar.
      #+BEGIN_SRC haskell :results none :noweb yes
      factorials = scanl (*) 1 [1..]
      :{
      factorial :: Integer -> Integer
      factorial n = factorials !! (fromIntegral n)
      :}
      factorial 0
      factorial 1
      factorial 2
      factorial 3
      factorial 4
      factorial 5
      #+END_SRC

* Exercises

  #+NAME: ghci-clean
  #+BEGIN_SRC emacs-lisp :var content="" :results raw
  (string-join
   (seq-filter
    (lambda (line)
      (not (string-empty-p line)))
    (seq-map
     (lambda (line)
       (replace-regexp-in-string "^.*Prelude.*> " "" line))
     (split-string content "\n")))
   "\n"))
  #+END_SRC

  #+NAME: add-current-chapter-directory-in-path
  #+BEGIN_SRC emacs-lisp :output raw
   (concat
    ":set -i"
    (file-name-as-directory (file-name-directory (buffer-file-name)))
    (file-name-base (buffer-file-name)))
  #+END_SRC

  #+NAME: start-at-line
  #+BEGIN_SRC sh :var content="" :var line="0" :results raw
  echo "$content" | tail -n +$line
  #+END_SRC

** Warm-up and Review

   1. Given the following sets of consonants and vowels

      #+NAME: letters
      #+BEGIN_SRC haskell :eval never
      stops  = "pbtdkg"
      vowels = "aeiou"
      #+END_SRC

      1. Write a function that takes inputs from stops and vowels and
         makes 3-tuples of all possible /stop-vowel-stop/
         combinations.

         #+BEGIN_SRC haskell :results none :noweb yes
         <<letters>>
         stopVowelStop = [(s1, w, s2) | s1 <- stops, w <- vowels, s2 <- vowels]
         stopVowelStop
         #+END_SRC

      2. Modify that function so that it only returns the combinations
         that begin with a /p/.

         #+BEGIN_SRC haskell :results none :noweb yes
         <<letters>>
         stopVowelStop = [(s1, w, s2) | s1 <- stops, w <- vowels, s2 <- vowels, s1 == 'p']
         stopVowelStop
         #+END_SRC

      3. Now set up lists of nouns and verbs (instead of stops and
         vowels) and modify the function to make tuples represent- ing
         possible noun-verb-noun sentences.

         #+BEGIN_SRC haskell :results none
         nouns = ["people", "history", "way", "art", "world"]
         verbs = ["ask", "be", "become", "begin", "call", "can"]
         nounVerbNoun = [n1 ++ " " ++ v ++ " " ++ n2 | n1 <- nouns, v <- verbs, n2 <- nouns]
         nounVerbNoun
         #+END_SRC

   2. What does the following mystery function do? What is its type?

      #+BEGIN_SRC haskell :results none
      seekritFunc x = div (sum (map length (words x))) (length (words x))
      #+END_SRC

      It calculates the average lenght of words in a string, the type
      is ~String -> Int~

   3. We’d really like the answer to be more precise. Can you rewrite
      that using fractional division?

      #+BEGIN_SRC haskell :results none
      :{
      seekritFunc x = (sum (map length' (words x))) / (length' (words x))
        where length' = fromIntegral . length
      :}
      :t seekritFunc
      #+END_SRC

** Exercises: Rewriting functions using folds
   In the previous chapter, you wrote these functions using direct
   recur- sion over lists. The goal now is to rewrite them using
   folds. Where possible, to gain a deeper understanding of folding,
   try rewriting the fold version so that it is point-free.

   1. ~myOr~ returns ~True~ if any ~Bool~ in the list is ~True~.

      #+BEGIN_SRC haskell :results none
      :{
      myOr :: [Bool] -> Bool
      myOr = foldr (||) False
      :}
      myOr []
      myOr [False]
      myOr [True]
      myOr [False, True]
      myOr [False, False]
      myOr [True, False]
      #+END_SRC

   2. ~myAny~ returns ~True~ if ~a -> Bool~ applied to any of the
      values in the list returns ~True~.

      #+BEGIN_SRC haskell :results none
      :{
      myAny :: (a -> Bool) -> [a] -> Bool
      myAny f = foldr ((||) . f) False
      :}
      myAny even [1]
      myAny even [1, 3]
      myAny even [1, 2, 3]
      #+END_SRC

   3. Write two versions of ~myElem~. One version should use folding and
      the other should use ~any~.

      #+BEGIN_SRC haskell :results none
      :{
      myElem :: Eq a => a -> [a] -> Bool
      myElem x = foldr ((||) . (==) x) False
      :}
      myElem 1 [1, 2, 3]
      myElem 1 [2, 3]
      #+END_SRC

      #+BEGIN_SRC haskell :results none
      :{
      myElem :: Eq a => a -> [a] -> Bool
      myElem x = any ((==) x)
      :}
      myElem 1 [1, 2, 3]
      myElem 1 [2, 3]
      #+END_SRC

   4. Implement ~myReverse~, don’t worry about trying to make it lazy.

      #+BEGIN_SRC haskell :results none
      :{
      myReverse :: [a] -> [a]
      myReverse = foldl (flip (:)) []
      :}
      myReverse []
      myReverse [1]
      myReverse [1, 2]
      myReverse [1, 2, 3]
      myReverse "blah"
      #+END_SRC

   5. Write ~myMap~ in terms of ~foldr~. It should have the same behavior
      as the built-in ~map~.

      #+BEGIN_SRC haskell :results none
      :{
      myMap :: (a -> b) -> [a] -> [b]
      myMap f = foldr ((:) . f) []
      :}
      myMap id []
      myMap id [1]
      myMap id [1, 2]
      #+END_SRC

   6. Write ~myFilter~ in terms of foldr. It should have the same
      behavior as the built-in ~filter~.

      #+BEGIN_SRC haskell :results none :epilogue ":m"
      import Data.Bool
      :{
      myFilter :: (a -> Bool) -> [a] -> [a]
      myFilter f = foldr (\e a -> bool a (e : a) (f e)) []
      :}
      myFilter even [1, 2, 3]
      #+END_SRC

   7. ~squish~ flattens a list of lists into a list

      #+BEGIN_SRC haskell :results none
      :{
      squish :: [[a]] -> [a]
      squish = foldr (flip $ foldr (:)) []
      :}
      squish [[1..3], [3..5]]
      #+END_SRC

   8. ~squishMap~ maps a function over a list and concatenates the
      results.

      #+BEGIN_SRC haskell :results none
      :{
      squishMap :: (a -> [b]) -> [a] -> [b]
      squishMap f = foldr ((flip (foldr (:))) . f) []
      :}
      squishMap (\x -> [1, x, 3]) [2]
      squishMap (\x -> "WO " ++ [x] ++ " OT ") "blah"
      #+END_SRC

   9. ~squishAgain~ flattens a list of lists into a list. This time
      reuse the ~squishMap~ function.

      #+BEGIN_SRC haskell :results none
      :{
      squishMap :: (a -> [b]) -> [a] -> [b]
      squishMap f = foldr ((flip (foldr (:))) . f) []
      :}
      :{
      squishAgain :: [[a]] -> [a]
      squishAgain = squishMap id
      :}
      squishAgain [[1..3], [3..5]]
      #+END_SRC

   10. ~myMaximumBy~ takes a comparison function and a list and
       returns the greatest element of the list based on the last
       value that the comparison returned ~GT~ for.

       #+BEGIN_SRC haskell :results none
       :{
       myMaximumBy :: (a -> a -> Ordering) -> [a] -> a
       myMaximumBy _ [] = error "empty list"
       myMaximumBy f (x:xs) = foldl max x xs
         where max x y = case f x y of
                           GT -> x
                           _ -> y
       :}
       myMaximumBy compare [1]
       myMaximumBy compare [1, 2]
       myMaximumBy (\_ _ -> GT) [1..10]
       myMaximumBy (\_ _ -> LT) [1..10]
       myMaximumBy compare [1..10]
       #+END_SRC

   11. ~myMinimumBy~ takes a comparison function and a list and returns
       the least element of the list based on the last value that the
       comparison returned LT for.

       #+BEGIN_SRC haskell :results none
       :{
       myMinimumBy :: (a -> a -> Ordering) -> [a] -> a
       myMinimumBy _ [] = error "empty list"
       myMinimumBy f (x:xs) = foldl min x xs
         where min x y = case f x y of
                           LT -> x
                           _ -> y
       :}
       myMinimumBy compare [1]
       myMinimumBy compare [1, 2]
       myMinimumBy (\_ _ -> GT) [1..10]
       myMinimumBy (\_ _ -> LT) [1..10]
       myMinimumBy compare [1..10]
       #+END_SRC
