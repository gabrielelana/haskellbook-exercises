# -*- eval: (org-babel-lob-ingest "./ob-haskell-common.org"); -*-

#+TITLE: Parser Combinators

#+PROPERTY: header-args:haskell :results replace output
#+PROPERTY: header-args:haskell+ :noweb yes
#+PROPERTY: header-args:haskell+ :wrap EXAMPLE

* 24.1 Parser Combinators
Given a serialized input in the form of sequence of bytes and return a
structured data type, normally a tree (AST: Abstract Syntax Tree).

* 24.2 A Few More Words of Introduction
This chapter will not proceed, like the others, bottom up because it
will be too much for a topic so big but the focus will be on enabling
the use of preexisting Haskell's libraries.

* 24.3 Understating the Parsing Process
A /Parser Combinator/ is an higher-order function that takes parsers
and returns a parser that is a combination of some sorts of the
parsers taken as input.

Parsers "consumes" the input text by "reading" one character at time.

The "effect" of parsers is our case is to "consume" input.

The "state" of the parser is the remaining input and the partial
result.

#+NAME: parser-prelude
#+BEGIN_SRC haskell :eval never
import Text.Trifecta
import Text.Parser.Combinators

:{
testParse :: Show a => String -> Parser a -> IO ()
testParse s p = print $ parseString p mempty s
:}
#+END_SRC

#+BEGIN_SRC haskell
<<parser-prelude>>

:{
stop :: Parser a
stop = unexpected "stop"
:}

:{
one :: Parser Char
one = char '1'
:}

:{
oneTwo :: Parser Char
oneTwo = char '1' >> char '2'
:}

-- one >> stop

-- We are discarding the result of ~one~ but the effect of consuming
-- input remainins as expected from the monadic operator ~>>~

testParse "123" one
testParse "123" $ one >> stop
testParse "123" $ oneTwo >> stop
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Success '1'
Failure (ErrInfo {_errDoc = (interactive):1:2: error: unexpected stop
1 | 123<EOF>
  |  ^       , _errDeltas = [Columns 1 1]})
Failure (ErrInfo {_errDoc = (interactive):1:3: error: unexpected stop
1 | 123<EOF>
  |   ^      , _errDeltas = [Columns 2 2]})
#+END_EXAMPLE

** Exercises: Parsing Practice

1. There's a combinator that expect an input stream to be finished at
   a particular point ~eof~ in ~Text.Parser.Combinators~, can you make
   ~one~ and ~oneTwo~ parsers fail because they don't exhaust the
   input stream?

   #+BEGIN_SRC haskell
   <<parser-prelude>>

   :{
   one :: Parser Char
   one = char '1'
   :}

   :{
   oneTwo :: Parser Char
   oneTwo = char '1' >> char '2'
   :}

   testParse "123" one
   testParse "123" oneTwo
   testParse "123" $ one >> eof
   testParse "123" $ oneTwo >> eof
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   Success '1'
   Success '2'
   Failure (ErrInfo {_errDoc = (interactive):1:2: error: expected: end of input
   1 | 123<EOF>
     |  ^       , _errDeltas = [Columns 1 1]})
   Failure (ErrInfo {_errDoc = (interactive):1:3: error: expected: end of input
   1 | 123<EOF>
     |   ^      , _errDeltas = [Columns 2 2]})
   #+END_EXAMPLE

2. Use ~string~ to make a ~Parser~ that parses "1", "12" and "123"

   #+BEGIN_SRC haskell
   <<parser-prelude>>

   :{
   stop :: Parser a
   stop = unexpected "stop"
   :}

   :{
   string' :: String -> Parser String
   string' = traverse char
   :}

   :{
   p123 :: Parser String
   p123 = choice [string "1", string "2", string "3"]
   :}

   testParse "1" p123
   -- testParse "12" p123
   -- testParse "123" p123

   -- testParse "1" $ p123 >> stop
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   Success "1"
   #+END_EXAMPLE

3. Try writing a parser that behaves like ~string~ using ~char~

   #+BEGIN_SRC haskell
   <<parser-prelude>>

   :{
   string' :: String -> Parser String
   string' = traverse char
   :}

   testParse "123" $ string "123"
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   Success "123"
   #+END_EXAMPLE

* 24.4 Parsing Fractions
#+NAME: parse-fraction
#+BEGIN_SRC haskell
<<parser-prelude>>

import Data.Ratio ((%))
import Text.Trifecta

:{
parseFraction :: Parser Rational
parseFraction = do
  numerator <- decimal
  char '/'
  denominator <- decimal
  if denominator == 0
  then fail "denominator cannot be zero"
  else return (numerator % denominator)
:}
#+END_SRC

#+BEGIN_SRC haskell
<<parse-fraction>>

testParse "1/2" parseFraction
testParse "2/1" parseFraction
testParse "1/0" parseFraction
testParse "10" parseFraction
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Success (1 % 2)
Success (2 % 1)
Failure (ErrInfo {_errDoc = (interactive):1:4: error: denominator cannot be zero, expected: digit
1 | 1/0<EOF>
  |    ^     , _errDeltas = [Columns 3 3]})
Failure (ErrInfo {_errDoc = (interactive):1:3: error: unexpected EOF, expected: "/", digit
1 | 10<EOF>
  |   ^     , _errDeltas = [Columns 2 2]})
#+END_EXAMPLE

First time that we see and use ~fail~

#+BEGIN_SRC haskell
-- What is this sorcery?
:t fail
:i fail
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
fail :: MonadFail m => String -> m a
class Monad m => MonadFail (m :: * -> *) where
  fail :: String -> m a
  	-- Defined in ‘Control.Monad.Fail’
#+END_EXAMPLE

** Exercise: Unit of Success
Write a parser ~onlyInteger~ that will parse a number, returns that
number and asserts that the input stops there (NOTE: ~integer >> eof~
works but the result is going to be, in case of success, always of
type ~()~, you must fix this)

#+BEGIN_SRC haskell
<<parser-prelude>>

:{
onlyInteger :: Parser Integer
onlyInteger = integer <* eof
:}

testParse "123" onlyInteger
testParse "123abc" onlyInteger
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Success 123
Failure (ErrInfo {_errDoc = (interactive):1:4: error: expected: digit, end of input
1 | 123abc<EOF>
  |    ^        , _errDeltas = [Columns 3 3]})
#+END_EXAMPLE

* 24.5 Haskell's parsing ecosystem
...

* 24.6 Alternative
#+BEGIN_SRC haskell
import Control.Applicative

:i Alternative
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
class Applicative f => Alternative (f :: * -> *) where
  empty :: f a
  (<|>) :: f a -> f a -> f a
  some :: f a -> f [a]
  many :: f a -> f [a]
  {-# MINIMAL empty, (<|>) #-}
  	-- Defined in ‘GHC.Base’
instance Alternative ZipList -- Defined in ‘Control.Applicative’
instance GHC.Base.MonadPlus m => Alternative (WrappedMonad m)
  -- Defined in ‘Control.Applicative’
instance (Control.Arrow.ArrowZero a, Control.Arrow.ArrowPlus a) =>
         Alternative (WrappedArrow a b)
  -- Defined in ‘Control.Applicative’
instance Alternative Result -- Defined in ‘Text.Trifecta.Result’
instance Alternative m => Alternative (Unspaced m)
  -- Defined in ‘Text.Parser.Token’
instance Alternative m => Alternative (Unlined m)
  -- Defined in ‘Text.Parser.Token’
instance Alternative m => Alternative (Unhighlighted m)
  -- Defined in ‘Text.Parser.Token’
instance Alternative Parser -- Defined in ‘Text.Trifecta.Parser’
instance [safe] Control.Monad.Trans.Error.Error e =>
                Alternative (Either e)
  -- Defined in ‘Control.Monad.Trans.Error’
instance Alternative [] -- Defined in ‘GHC.Base’
instance Alternative Maybe -- Defined in ‘GHC.Base’
instance Alternative IO -- Defined in ‘GHC.Base’
#+END_EXAMPLE

** Exercise: Try ~try~
Make a parser, using the existing ~parseFraction~ plus a new
~parseDecimal~ that can parse either decimals or fractions.

#+BEGIN_SRC haskell
<<parse-fraction>>

:{
parseDecimal :: Parser Integer
parseDecimal = decimal
:}

:{
parseNumber :: Parser (Either Rational Integer)
parseNumber = (Left <$> try parseFraction) <|> (Right <$> parseDecimal)
:}

testParse "1/10" parseNumber
testParse "10" parseNumber
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Success (Left (1 % 10))
Success (Right 10)
#+END_EXAMPLE

* 24.7 Parsing Configuration Files
For the next few examples we will use INI files

#+BEGIN_SRC example
; comment
[section]
host=wikipedia.org
alias=claw
#+END_SRC

#+NAME: ini-prelude
#+BEGIN_SRC haskell :eval never
import Text.Trifecta
import Text.Parser.Combinators
import qualified Data.Map as M

:{
skipEOL :: Parser ()
skipEOL = skipMany (oneOf "\n")
:}
#+END_SRC

#+NAME: ini-parse-header
#+BEGIN_SRC haskell :results silent
<<ini-prelude>>

newtype Header = Header String deriving (Eq, Ord, Show)

:{
parseBetweenSquareBraket :: Parser a -> Parser a
parseBetweenSquareBraket p = char '[' *> p <* char ']'
:}

:{
parseHeader :: Parser Header
parseHeader = parseBetweenSquareBraket $ Header <$> some letter
:}
#+END_SRC

#+BEGIN_SRC haskell
<<parser-prelude>>
<<ini-parse-header>>

testParse "[hello]" parseHeader
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Success (Header "hello")
#+END_EXAMPLE

#+NAME: ini-parse-assignments
#+BEGIN_SRC haskell :results silent
<<ini-prelude>>

type Name = String
type Value = String

:{
parseAssignment :: Parser (Name, Value)
parseAssignment = do
  name <- some letter
  char '='
  value <- some (noneOf "\n")
  skipEOL
  return (name, value)
:}
#+END_SRC

#+BEGIN_SRC haskell
<<parser-prelude>>
<<ini-prelude>>

testParse "foo=bar" parseAssignment
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Success ("foo","bar")
#+END_EXAMPLE

#+NAME: ini-parse-section
#+BEGIN_SRC haskell :results silent
<<ini-prelude>>
<<ini-parse-header>>

type Assignments = M.Map Name Value

:{
skipComment :: Parser ()
skipComment = skipSome (oneOf ";#") >> skipMany (noneOf "\n") >> skipEOL
:}

:{
skipWhitespace :: Parser ()
skipWhitespace = () <$ oneOf " \n"
:}

:{
parseSection :: Parser (Header, Assignments)
parseSection = do
  many skipWhitespace
  many skipComment
  header <- parseHeader
  skipEOL
  assignments <- some parseAssignment
  return (header, M.fromList assignments)
:}
#+END_SRC

#+BEGIN_SRC haskell
<<parser-prelude>>
<<ini-parse-section>>

testParse ";ignore" skipComment
testParse ";ignore\n" skipComment
testParse ";ignore\n#blabla\n" (some skipComment)
testParse ";ignore\n#blabla\n" (many skipComment)
testParse ";ignore\n[foo]\nbar=baz" parseSection
testParse ";ignore\n\n[foo]\nbar=baz\n" parseSection
testParse ";ignore\n\n[foo]\nbar=baz\n\nbiz=fooz" parseSection
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Success ()
Success ()
Success [(),()]
Success [(),()]
Success (Header "foo",fromList [("bar","baz")])
Success (Header "foo",fromList [("bar","baz")])
Success (Header "foo",fromList [("bar","baz"),("biz","fooz")])
#+END_EXAMPLE

#+NAME: ini-parse
#+BEGIN_SRC haskell :results silent
<<ini-parse-section>>

newtype Config = Config (M.Map Header Assignments) deriving (Eq, Show)

:{
parseIni :: Parser Config
parseIni = do
  sections <- some parseSection
  return $ Config (M.fromList sections)
:}
#+END_SRC

#+BEGIN_SRC haskell
<<parser-prelude>>
<<ini-parse>>

testParse ";ignore\n\n[foo]\nfor=foz\n\n#ignore\n[bar]\nbaz=biz" parseIni
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Success (Config (fromList [(Header "bar",fromList [("baz","biz")]),(Header "foo",fromList [("for","foz")])]))
#+END_EXAMPLE

* 24.8 Character and token parsers
Tokenization is about ignoring noise in the finer grained parser so
that the higher level parsers can be simpler. In parser combinators
~token~ can also be found as ~lex~ that stands for /lexeme/ aka "basic
lexical unit of a language".

#+BEGIN_SRC haskell
<<parser-prelude>>

testParse "aaa" $ char 'a'
testParse "aaa" $ some (char 'a')
testParse "a a a" $ some (char 'a')
testParse "a a a" $ some (token $ char 'a')
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Success 'a'
Success "aaa"
Success "a"
Success "aaa"
#+END_EXAMPLE

* 24.9 Polymorphic parsers
By defining parsers using ~TokenParsing~ from
~Text.Parser.Combinators~ we can use then multiple libraries to run
the parser (ex. /Trifecta/, /Attoparsec/, ...)

** Backtracking
Alternative do not backtrack, with this you can have errors that are
hard to debug

#+BEGIN_SRC haskell
<<parser-prelude>>

p = (char '1' >> char '2') <|> (char '1' >> char '3')
p' = try (char '1' >> char '2') <|> (char '1' >> char '3')

q = try (char '1' >> char '2' >> char '3') <|> char '3'
q' = try (char '3') <|> (char '1' >> char '2' >> char '3')

testParse "13" p -- fails but intuitively it shouldn't have
testParse "13" p' -- you must use try
testParse "124" q -- even then thouhg the error can be deceiving
testParse "124" q' -- when possible you should take care of "precedence"
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Failure (ErrInfo {_errDoc = (interactive):1:2: error: expected: "2"
1 | 13<EOF>
  |  ^      , _errDeltas = [Columns 1 1]})
Success '3'
Failure (ErrInfo {_errDoc = (interactive):1:1: error: expected: "3"
1 | 124<EOF>
  | ^        , _errDeltas = [Columns 0 0]})
Failure (ErrInfo {_errDoc = (interactive):1:3: error: expected: "3"
1 | 124<EOF>
  |   ^      , _errDeltas = [Columns 2 2]})
#+END_EXAMPLE

* 24.10 Marshalling from an AST to a datatype
With statically typed languages when you have text that represent
information for you program you need to *parse* the text accordingly
to its /structure/ into a generic data structure related to the format
(ex. ~Data.Aeson.Value~) and then *unmarshal* it to a data specific
and /meaningful/ data structure for you program.

#+BEGIN_SRC example
Text -----> Structure ----------> Meaning
     parse            unmarshall
                       (toJSON)

Meaning --------> Structure ---------> Text
        marshall            serialize
       (fromJSON)
#+END_SRC

#+BEGIN_SRC haskell
:set -XOverloadedStrings
:set -XQuasiQuotes

import Control.Applicative
import Data.Aeson
import Text.RawString.QQ
import qualified Data.ByteString as BS
import qualified Data.ByteString.Lazy as LBS

:{
exampleJSON :: LBS.ByteString
exampleJSON = [r|
{ "section": {"host": "wikipedia.org"},
  "what": {"red": "pretty"}
}
|]
:}

:t encode
:t decode

-- It will result into ~Nothing~ because type inference cannot
-- inference any type and the only thing to do is to give back
-- the default ~Nothing~
decode exampleJSON
:t decode exampleJSON

-- ~Value~ is the generic data structure for representing JSON
-- for Aeson
decode exampleJSON :: Maybe Value

-- We will create a specific data structure to represent the
-- information encoded in JSON
:{
data Data = Data { section :: Host
                 , what :: Color
                 } deriving (Eq, Show)
:}

newtype Host = Host String deriving (Eq, Show)

type Annotation = String

:{
data Color = Red Annotation
           | Blue Annotation
           | Yellow Annotation
           deriving (Eq, Show)
:}

-- Cannot decode/unmarshall without an instance of ~FromJSON~
-- typeclass for the specified type ~Data~
decode exampleJSON :: Maybe Data

:{
instance FromJSON Color where
  parseJSON (Object v) =  (Red <$> v .: "red")
                     <|> (Blue <$> v .: "blue")
                     <|> (Yellow <$> v .: "yellow")
  parseJSON _ = fail "exepcted an object for Color"
:}

:{
instance FromJSON Data where
  parseJSON (Object v) =
    Data <$> v .: "section"
         <*> v .: "what"
  parseJSON _ = fail "expected an object for Data"
:}

:{
instance FromJSON Host where
  parseJSON (Object v) =
    Host <$> v .: "host"
  parseJSON _ = fail "exepcted an object for Host"
:}

decode exampleJSON :: Maybe Data
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
encode :: ToJSON a => a -> LBS.ByteString
decode :: FromJSON a => LBS.ByteString -> Maybe a
Nothing
decode exampleJSON :: FromJSON a => Maybe a
Just (Object (fromList [("what",Object (fromList [("red",String "pretty")])),("section",Object (fromList [("host",String "wikipedia.org")]))]))
<interactive>:608:1: error:
    • No instance for (FromJSON Data) arising from a use of ‘decode’
      There are instances for similar types:
        instance [safe] FromJSON Ghci71.Data
          -- Defined at <interactive>:542:10
    • In the expression: decode exampleJSON :: Maybe Data
      In an equation for ‘it’: it = decode exampleJSON :: Maybe Data
Just (Data {section = Host "wikipedia.org", what = Red "pretty"})
#+END_EXAMPLE

* 24.11 Chapter Exercises
1. Write a parser for semantic versions as defined by http://semver.org
   Write an instance of ~Ord~ for the ~SemVer~ type conforming with specifications

   #+BEGIN_SRC haskell
   <<add-current-chapter-directory-in-path()>>
   :load SemVer

   parse "2.1.1"
   parse "1.0.0-x.7.z.92"
   parse "1.0.0-gamma+002"
   parse "1.0.0-beta+oof.sha.41af286"

   parse "2.1.1" > parse "2.1.0"
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   [1 of 1] Compiling SemVer           ( /home/coder/code/haskellbook-exercises/chapter-024/SemVer.hs, interpreted )
   Ok, one module loaded.
   Just (Version {major = 2, minor = 1, patch = 1, release = [], build = []})
   Just (Version {major = 1, minor = 0, patch = 0, release = ["x","7","z","92"], build = []})
   Just (Version {major = 1, minor = 0, patch = 0, release = ["gamma"], build = ["002"]})
   Just (Version {major = 1, minor = 0, patch = 0, release = ["beta"], build = ["oof","sha","41af286"]})
   True
   #+END_EXAMPLE

2. Write a parser for positive integer values

   #+BEGIN_SRC haskell
   <<parser-prelude>>

   :{
   positiveNumber :: Parser Integer
   positiveNumber = read <$> p <* somethingElse
     where p = string "0" <|> some (oneOf "123456789") <?> "integer"
           somethingElse = notFollowedBy p <?> "no leading zeros allowed"
   :}

   testParse "123" positiveNumber
   testParse "123abc" positiveNumber
   testParse "abc" positiveNumber
   testParse "001" positiveNumber
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   Success 123
   Success 123
   Failure (ErrInfo {_errDoc = (interactive):1:1: error: expected: integer
   1 | abc<EOF>
     | ^        , _errDeltas = [Columns 0 0]})
   Failure (ErrInfo {_errDoc = (interactive):1:2: error: expected: no leading zeros allowed
   1 | 001<EOF>
     |  ^       , _errDeltas = [Columns 1 1]})
   #+END_EXAMPLE

3. Extend the parser before to handle negative and positive numbers.
   #+BEGIN_SRC haskell
   <<parser-prelude>>

   :{
   positiveNumber :: Parser Integer
   positiveNumber = read <$> p <* somethingElse
     where p = string "0" <|> some (oneOf "123456789") <?> "integer"
           somethingElse = notFollowedBy p <?> "no leading zeros allowed"
   :}

   :{
   signedNumber :: Parser Integer
   signedNumber = do
     char '-'
     n <- positiveNumber
     return (-n)
   :}

   testParse "-123" signedNumber
   testParse "-123abc" signedNumber
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   Success (-123)
   Success (-123)
   #+END_EXAMPLE

4. Write a parser for US/Canada phone numbers with varying formats.
   #+BEGIN_SRC haskell
   <<parser-prelude>>

   :{
   data PhoneNumber = PhoneNumber { planArea :: Int
                                  , exchange :: Int
                                  , lineNumber :: Int
                                  } deriving (Eq, Show)
   :}

   :{
   suffixP :: Parser String
   suffixP = symbol "-" <|> some space
   :}

   :{
   internationalPrefixP :: Parser Int
   internationalPrefixP = do
     _ <- optional $ char '+'
     n <- 1 <$ string "1"
     _ <- suffixP
     return n
   :}

   :{
   planAreaP :: Parser Int
   planAreaP = read <$> (p <* optional suffixP) <?> "plan area"
     where p = (char '(' *> number <* char ')') <|> number
           number = count 3 digit
   :}

   :{
   exchangeP :: Parser Int
   exchangeP = read <$> (count 3 digit <* optional suffixP) <?> "exchange"
   :}

   :{
   lineNumberP :: Parser Int
   lineNumberP = read <$> (count 4 digit) <?> "line number"
   :}

   :{
   phoneNumberP :: Parser PhoneNumber
   phoneNumberP = do
     _ <- optional $ try internationalPrefixP
     PhoneNumber <$> planAreaP <*> exchangeP <*> lineNumberP
   :}

   testParse "+1 " $ internationalPrefixP <* eof
   testParse "+1-" $ internationalPrefixP <* eof
   testParse "1-" $ internationalPrefixP <* eof
   testParse "123" $ planAreaP <* eof
   testParse "(123)" $ planAreaP <* eof
   testParse "123-" $ planAreaP <* eof
   testParse "123 " $ planAreaP <* eof
   testParse "456" exchangeP
   testParse "456-" exchangeP
   testParse "456 " exchangeP
   testParse "7890" lineNumberP
   testParse "1234567890" phoneNumberP
   testParse "1-1234567890" phoneNumberP
   testParse "123-456-7890" phoneNumberP
   testParse "(123) 456-7890" phoneNumberP
   testParse "1-123-456-7890" phoneNumberP
   testParse "+1 (123) 456-7890" phoneNumberP
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   Success 1
   Success 1
   Success 1
   Success 123
   Success 123
   Success 123
   Success 123
   Success 456
   Success 456
   Success 456
   Success 7890
   Success (PhoneNumber {planArea = 123, exchange = 456, lineNumber = 7890})
   Success (PhoneNumber {planArea = 123, exchange = 456, lineNumber = 7890})
   Success (PhoneNumber {planArea = 123, exchange = 456, lineNumber = 7890})
   Success (PhoneNumber {planArea = 123, exchange = 456, lineNumber = 7890})
   Success (PhoneNumber {planArea = 123, exchange = 456, lineNumber = 7890})
   Success (PhoneNumber {planArea = 123, exchange = 456, lineNumber = 7890})
   #+END_EXAMPLE

5. Write a parser for an activity log format (examples below) and:
   - tell the sum of time spent on each activity
   - tell the average time at day spent on each activity

   #+BEGIN_SRC haskell
   <<add-current-chapter-directory-in-path()>>
   :load ActivityLog

   filePath = "<<current-directory()>>/ActivityLog.example"
   (fmap . fmap) sumActivitiesDuration $ fromFile filePath
   (fmap . fmap) avgActivitiesDuration $ fromFile filePath
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   [1 of 1] Compiling ActivityLog      ( /home/coder/code/haskellbook-exercises/chapter-024/ActivityLog.hs, interpreted )
   Ok, one module loaded.
   Success (fromList [("Breakfast",120),("Bumped head, passed out",276),("Commute home for rest",30),("Commuting home in rover",30),("Dinner",135),("Exercising in high-grav gym",60),("Go to medbay",3),("Lunch",60),("Patch self up",5),("Programming",240),("R&R",90),("Read",495),("Sanitizing moisture collector",120),("Shower",15),("Sleep",240),("Wake up, headache",1)])
   Success (fromList [("Breakfast",60.0),("Bumped head, passed out",138.0),("Commute home for rest",15.0),("Commuting home in rover",15.0),("Dinner",67.5),("Exercising in high-grav gym",30.0),("Go to medbay",1.5),("Lunch",30.0),("Patch self up",2.5),("Programming",120.0),("R&R",45.0),("Read",247.5),("Sanitizing moisture collector",60.0),("Shower",7.5),("Sleep",120.0),("Wake up, headache",0.5)])
   #+END_EXAMPLE

6. Write a parser for IPv4 addresses.
   #+BEGIN_SRC haskell
   <<add-current-chapter-directory-in-path()>>
   :load IPAddress4

   parse "204.120.0.15"
   parse "127.0.0.1"
   parse "204.120.0.15.1"
   parse "666.120.0.15"
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   [1 of 1] Compiling IPAddress4       ( /home/coder/code/haskellbook-exercises/chapter-024/IPAddress4.hs, interpreted )
   Ok, one module loaded.
   Success 204.120.0.15
   Success 127.0.0.1
   Failure (ErrInfo {_errDoc = (interactive):1:15: error: IPv4 addresses must be composed of 4
       octects, expected: ".", digit
   1 | 204.120.0.15.1<EOF>
     |               ^     , _errDeltas = [Columns 14 14]})
   Failure (ErrInfo {_errDoc = (interactive):1:13: error: IPv4 octect must be between 0 and 255, expected: ".",
       digit
   1 | 666.120.0.15<EOF>
     |             ^     , _errDeltas = [Columns 12 12]})
   #+END_EXAMPLE

7. Write a parser for IPv6 addresses
   #+BEGIN_SRC haskell
   <<add-current-chapter-directory-in-path()>>
   :load IPAddress6

   parse "0:0:0:0:0:ffff:ac10:fe01"
   parse "FE80:0000:0000:0000:0202:B3FF:FE1E:8329"
   parse "FE80::0202:B3FF:FE1E:8329"
   parse "2001:DB8::8:800:200C:417A"
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   [1 of 1] Compiling IPAddress6       ( /home/coder/code/haskellbook-exercises/chapter-024/IPAddress6.hs, interpreted )
   Ok, one module loaded.
   Success 0:0:0:0:0:ffff:ac10:fe01
   Success fe80:0:0:0:202:b3ff:fe1e:8329
   Success fe80:0:0:0:202:b3ff:fe1e:8329
   Success 2001:db8:0:0:8:800:200c:417a
   #+END_EXAMPLE

8. Remove the derived ~Show~ instances for ~IPAddress~ and
   ~IPAddress6~ and write your own ~Show~ instance that renders the
   addresses in their canonical format

   #+BEGIN_SRC haskell
   <<add-current-chapter-directory-in-path()>>
   :load IPAddress4

   parse "204.120.0.15"
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   [1 of 1] Compiling IPAddress4       ( /home/coder/code/haskellbook-exercises/chapter-024/IPAddress4.hs, interpreted )
   Ok, one module loaded.
   Success 204.120.0.15
   #+END_EXAMPLE

   #+BEGIN_SRC haskell
   <<add-current-chapter-directory-in-path()>>
   :load IPAddress6

   parse "FE80::0202:B3FF:FE1E:8329"
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   [1 of 1] Compiling IPAddress6       ( /home/coder/code/haskellbook-exercises/chapter-024/IPAddress6.hs, interpreted )
   Ok, one module loaded.
   Success 0:0:0:0:0:0:0:8329
   #+END_EXAMPLE

9. Write a function that converts between ~IPAddress4~ and ~IPAddress6~
   #+BEGIN_SRC haskell
   <<add-current-chapter-directory-in-path()>>
   :load IPAddress4 IPAddress6
   :module - IPAddress4
   :module - IPAddress6
   import qualified IPAddress6 as IPv6
   import qualified IPAddress4 as IPv4

   :{
   toIPAddress6 :: IPv4.IPAddress4 -> IPv6.IPAddress6
   toIPAddress6 a =
     IPv6.fromComponents [0, 0, 0, 0, 0, 0xffff, toWord16 aw1 aw2, toWord16 aw3 aw4]
     where toWord16 :: Word8 -> Word8 -> Word16
           toWord16 w1 w2 = (fromIntegral w1 `shift` 8) .|. (fromIntegral w2)
           [aw1, aw2, aw3, aw4] = IPv4.toComponents a
   :}

   :{
   toIPAddress4 :: IPv6.IPAddress6 -> IPv4.IPAddress4
   toIPAddress4 a =
     IPv4.fromComponents [w1, w2, w3, w4]
     where [w1, w2] = fromWord16 aw7
           [w3, w4] = fromWord16 aw8
           fromWord16 :: Word16 -> [Word8]
           fromWord16 w = fromIntegral <$> [(w .&. 0xff `shiftL` 8) `shiftR` 8, w .&. 0xff]
           [0, 0, 0, 0, 0, 0xffff, aw7, aw8] = IPv6.toComponents a
   :}

   toIPAddress6 <$> IPv4.parse "209.173.53.167" -- 0:0:0:0:0:ffff:d1ad:35a7
   toIPAddress4 . toIPAddress6 <$> IPv4.parse "209.173.53.167" -- back to 209.173.53.167
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   [1 of 2] Compiling IPAddress4       ( /home/coder/code/haskellbook-exercises/chapter-024/IPAddress4.hs, interpreted )
   [2 of 2] Compiling IPAddress6       ( /home/coder/code/haskellbook-exercises/chapter-024/IPAddress6.hs, interpreted )
   Ok, two modules loaded.
   Success 0:0:0:0:0:ffff:d1ad:35a7
   Success 209.173.53.167
   #+END_EXAMPLE

10. Write a parser for the DOT language that ~Graphviz~ uses to
    express graphs in plain text.

    [[file:chapter-024/Dot.hs::-- Grammar: https://graphviz.org/doc/info/lang.html][Look Here]]
