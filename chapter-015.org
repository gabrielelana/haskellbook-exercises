# -*- eval: (org-babel-lob-ingest "./ob-haskell-common.org"); -*-

#+TITLE: Monoid, Semigroup

#+PROPERTY: header-args:haskell :results replace output
#+PROPERTY: header-args:haskell+ :noweb yes
#+PROPERTY: header-args:haskell+ :session none
#+PROPERTY: header-args:haskell+ :wrap EXAMPLE

* 15.01 Monoids and Semigropus
Haskell community recognized abstract patterns in code which have
well-defined lawful representation in mathematics. Those abstractions
are called /Algebras/

* 15.02 What we talk about when we talk about algebras
- Branch of mathematics that study symbols and the rules governing
  their manipulation. Don't care about specific values but the rules
  of how how to manipulate symbols representing those values.
- Refers to some /operations/ and a /set/ they operate over.
- In Haskell algebras can be implemented with /typeclasses/. The /set/
  is the /type/ the operation are for. The /operations/ are specified
  in the /typeclass/. The instance of the /typeclass/ defines how each
  operation will perform for a given /type/ or /set/.

* 15.03 Monoid
One of the algebras we use is /monoid/. A /monoid/ is a binary
associative operation with an identity.

A monoid is a function that takes two arguments and follows two laws:
associativity and identity.
- associativity: the arguments can be regrouped in different orders
  and give the same result.
- identity: exists a value that used with another value in the binary
  operation the result is always the other value.

When we say something /is a monoid/ or can be described as monoidal,
we mean you can define at least one law-abiding Monoid instance for
it.

* 15.04 How Monoid is defined in Haskell
The typeclass abstracts and generalizes the pattern so that you write
code in terms of any type that can be monoidally combined.  The
monoidal operation is an operation tha intuitively lets you "join"
things together. This operation in Haskell is called ~mappend~

#+BEGIN_SRC haskell
:i Monoid
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
class Semigroup a => Monoid a where
mempty :: a
mappend :: a -> a -> a
mconcat :: [a] -> a
{-# MINIMAL mempty #-}
-- Defined in ‘GHC.Base’
instance Monoid [a] -- Defined in ‘GHC.Base’
instance Monoid Ordering -- Defined in ‘GHC.Base’
instance Semigroup a => Monoid (Maybe a) -- Defined in ‘GHC.Base’
instance Monoid a => Monoid (IO a) -- Defined in ‘GHC.Base’
instance Monoid b => Monoid (a -> b) -- Defined in ‘GHC.Base’
instance (Monoid a, Monoid b, Monoid c, Monoid d, Monoid e) =>
Monoid (a, b, c, d, e)
-- Defined in ‘GHC.Base’
instance (Monoid a, Monoid b, Monoid c, Monoid d) =>
Monoid (a, b, c, d)
-- Defined in ‘GHC.Base’
instance (Monoid a, Monoid b, Monoid c) => Monoid (a, b, c)
-- Defined in ‘GHC.Base’
instance (Monoid a, Monoid b) => Monoid (a, b)
-- Defined in ‘GHC.Base’
instance Monoid () -- Defined in ‘GHC.Base’
#+END_EXAMPLE

- ~mappend~ is how /any/ two values that inhabits a type that
  implements ~Monoid~ can be joined together.
- ~mempty~ is the identity value of that type for the ~mappend~
  operation.

* 15.05 Examples of using Monoid
Monoid for List (~mappend~ is implemented with ~++~ and ~mempty~ is ~[]~)

#+BEGIN_SRC haskell
mappend [1, 2, 3] [4, 5, 6]
mappend "gabriele" "lana"
mconcat [[1], [2, 3], [4]]
mappend [1..10] mempty
mappend mempty [1..10]
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
[1,2,3,4,5,6]
gabrielelana
[1,2,3,4]
[1,2,3,4,5,6,7,8,9,10]
[1,2,3,4,5,6,7,8,9,10]
#+END_EXAMPLE

* 15.06 Why Integer doesn't have an instance of Monoid
Because it will not be possible to choose between two monoidal
operations ~*~ and ~+~. To avoid the conflict and to abide by the rule
that typeclass instances are unique to the types they are for, Haskell
uses the /newtype/ ~Product~ and ~Sum~ defined in ~Data.Monoid~ to
disambiguate.

#+BEGIN_SRC haskell
import Data.Monoid

mappend (1::Integer) (2::Integer)
mappend (Product 1) (Product 2)
mappend (Sum 1) (Sum 2)
mappend (Sum 1.7) (Sum 2.3)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
<interactive>:206:1: error:
• No instance for (Monoid Integer) arising from a use of ‘mappend’
• In the expression: mappend (1 :: Integer) (2 :: Integer)
In an equation for ‘it’: it = mappend (1 :: Integer) (2 :: Integer)
Product {getProduct = 2}
Sum {getSum = 3}
Sum {getSum = 4.0}
#+END_EXAMPLE

We say that:
- Types with instances of ~Num~ form a ~Monoid~ under /multiplication/
  and /summation/
- Lists form a ~Monoid~ under /concatenation/

Multiple types have multiple possible monoids, we usually enforce the
unique instance rule of /typeclasses/ with /newtypes/

Why newtypes?
- To signal intent: make it clear that the only thing you intend to do
  is to wrap the underlying type. The /newtype/ cannot grow into a
  more complicated type while /datatype/ can.
- To improve type safety: to avoid mixing up many values that have the
  same representation but they are used for different things and with
  different meaning.
- To add different typeclasses to a type without changing its
  representation (like with ~Data.Monoid.Product~ and
  ~Data.Monid.Sum~).

For ~mappend~ we can use the infix operator ~<>~ as syntactic sugar
#+BEGIN_SRC haskell
:t (Data.Monoid.<>)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
(Data.Monoid.<>) :: Semigroup a => a -> a -> a
#+END_EXAMPLE

A few examples

#+BEGIN_SRC haskell
import Data.Monoid

[1, 2, 3] <> [4, 5, 6]
(Sum 4) <> (Sum 5)
(Sum 4) <> (Sum 5) <> (Sum 2)
(Product 4) <> (Product 5) <> (Product 2)
getSum $ (Sum 4) <> (Sum 5) <> (Sum 2)
getProduct $ (Product 4) <> (Product 5) <> (Product 2)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
[1,2,3,4,5,6]
Sum {getSum = 9}
Sum {getSum = 11}
Product {getProduct = 40}
11
40
#+END_EXAMPLE

* 15.07 Why Bother?
- Having principled laws for it means we can compose monoidal operations safely.
- A common use of monoids is to structure and describe common modes of processing data

* 15.08 Laws
Laws describes what constitutes a valid instance of an /algebra/, if
an instance is /lawful/ then all the property derived from those
laws then apply also to that instance, then we can have programs
that compose well and with predictable behaviors.

- Laws define algebras
- Laws provide guarantees (solid foundations)
- Guarantees provide predictable composition of programs
- Ability to combine programs gives us the ability to reuse programs
  in different contexts

Laws of /Monoid/

#+BEGIN_SRC haskell :eval never
-- left identity
left_identity_property x = mappend mempty x == x

-- right identity
right_identity_property x = mappend x mempty == x

-- associativity
associativity_property x y z = (mappend x (mappend y z)) == (mappend (mappend x y) z)

-- with this we can derive concat
derive_concat_property x = (mconcat x) == (foldr mappend mempty x)
#+END_SRC

The important part is that we have those guarantees even if we don't
know what Monoid we are working with :smile:

* 15.09 Different Instance, Same Representation
Multiple types have multiple instances of the Monoid typeclass, to
differentiate we will use newtypes like for numbers with ~Prod~ and ~Sum~

Booleans have a monoid for conjunction (~and~ with ~All~) and
disjunction (~and~ with ~Any~)

#+BEGIN_SRC haskell
All True <> All True
All True <> All False
All False <> All True
All False <> All False

Any True <> Any True
Any True <> Any False
Any False <> Any True
Any False <> Any False
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
All {getAll = True}
All {getAll = False}
All {getAll = False}
All {getAll = False}
Any {getAny = True}
Any {getAny = True}
Any {getAny = True}
Any {getAny = False}
#+END_EXAMPLE

~Maybe~ have multiple instances of Monoid, the newtype ~First~ will
select the typeclass that will keep the leftmost non ~Nothing~ value.

#+BEGIN_SRC haskell
First (Just 1) <> First (Just 2)
First Nothing <> First (Just 2)
First (Just 1) <> First Nothing

Last (Just 1) <> Last (Just 2)
Last Nothing <> Last (Just 2)
Last (Just 1) <> Last Nothing
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
First {getFirst = Just 1}
First {getFirst = Just 2}
First {getFirst = Just 1}
Last {getLast = Just 2}
Last {getLast = Just 2}
Last {getLast = Just 1}
#+END_EXAMPLE

* 15.10 Reusing Algebras by Asking for Algebras
We can use instances of Monoid for certain types to create instances
of Monoid for larger types made of those types

#+BEGIN_SRC haskell :eval never
instance (Monoid a, Monoid b) => Monoid (a, b)
#+END_SRC

The Monoid constraint on smaller types for larger types made of
those smaller types is needed when the monoidal composistion of the
larger type involves the monoidal composition of the smaller types.

** Exercise: Optional Monoid
Write the ~Monoid~ instance of ~Optional~ defined below

#+NAME: optional-definition
#+BEGIN_SRC haskell :eval never
data Optional a = Nada | Only a deriving (Eq, Show)
#+END_SRC

Expected behavior

#+BEGIN_SRC haskell :eval never
Prelude> Only (Sum 1) <> Only (Sum 1)
Only (Sun {getSum = 2})

Prelude> Only (Product 4) <> Only (Product 2)
Only (Product {getProduct = 8})

Prelude> Only (Sum 1) <> Nada
Only (Sum {getSum = 1})

Prelude> Only [1] <> Nada
Only [1]

Prelude> Nada <> Only (Sum 1)
Only (Sum {getSum = 1})
#+END_SRC

Implementation

#+BEGIN_SRC haskell
import Data.Monoid

<<optional-definition>>

:{
instance Semigroup a => Semigroup (Optional a) where
  Nada <> y = y
  x <> Nada = x
  (Only x) <> (Only y) = Only (x <> y)

instance Monoid a => Monoid (Optional a) where
  mempty = Nada
:}

Only (Sum 1) <> Only (Sum 1)
Only (Product 4) <> Only (Product 2)
Only (Sum 1) <> Nada
Only [1] <> Nada
Nada <> Only (Sum 1)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Only (Sum {getSum = 2})
Only (Product {getProduct = 8})
Only (Sum {getSum = 1})
Only [1]
Only (Sum {getSum = 1})
#+END_EXAMPLE

** Associativity
Associativity says that you can associate, or group, the arguments of
your operation differently, and the result will be the same.

** Identity
An identity is a value with a special relationship with an operation:
it turns the operation into the identity function.

** Orphan Instances
An orphan instance is when an instance of a typeclass is defined for a
datatype but the definition of the typeclass and the definition of the
datatype are not in the same module of the instance.

If you don't own both the datatype and the typeclass then use a
newtype around the datatype.

To avoid problems:
1. Define types, typeclasses and their instances in the same file.
2. Define types and instances of known typeclasses in the same file.
3. Define typeclasses and instances of known types in the same file.
4. Wrap known types to define instances of known typeclasses.

* 15.11 Madness
The idea of /mad libs/ is to take a template of a phrase and blindly
substitue categories of words and see if the result is funny

#+BEGIN_EXAMPLE
{exclamation}! he said {adverb} as he jumped
into his car {noun} and drove off with his
{adjective} wife.
#+END_EXAMPLE

#+BEGIN_SRC haskell :results silent
import Data.Monoid

type Exclamation = String
type Verb = String
type Adjective = String
type Adverb = String
type Noun = String

:{
madlibbin :: Exclamation -> Adverb -> Noun -> Adjective -> String
madlibbin e adv n adj =
  e <> "! he said " <> adv <> " as he jumped into his car " <>
  n <> " and drove off with his " <> adj <> " wife."
:}

-- Rewrite the code using mconcat

:{
madlibbin' :: Exclamation -> Adverb -> Noun -> Adjective -> String
madlibbin' exclamation adverb noun adjective = mconcat [
  exclamation, "! he said ", adverb, " as he jumped into his car ",
  noun, " and drove off with his ", adjective, " wife."
]
:}
#+END_SRC

* 15.12 Better Living Through QuickCheck
Testing associativity

#+NAME: monoid-associativity-property
#+BEGIN_SRC haskell
:{
monoidAssociativityProperty :: (Eq m, Monoid m) => m -> m -> m -> Bool
monoidAssociativityProperty x y z = x <> (y <> z) == (x <> y) <> z
:}
#+END_SRC

#+BEGIN_SRC haskell
import Data.Monoid
import Test.QuickCheck

<<monoid-associativity-property>>
<<quickcheck-with-output>>

quickCheckWithOutput (forAll arbitrary monoidAssociativityProperty)
quickCheckWithOutput (forAll arbitrary (monoidAssociativityProperty :: String -> String -> String -> Bool))

:seti -XTypeApplications

quickCheckWithOutput (forAll arbitrary (monoidAssociativityProperty @String))
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
+++ OK, passed 100 tests.\n
+++ OK, passed 100 tests.\n
+++ OK, passed 100 tests.\n
#+END_EXAMPLE

Testing left and right identity

#+NAME: monoid-left-identity-property
#+BEGIN_SRC haskell
:{
monoidLeftIdentityProperty :: (Eq m, Monoid m) => m -> Bool
monoidLeftIdentityProperty x = mempty <> x == x
:}
#+END_SRC

#+NAME: monoid-right-identity-property
#+BEGIN_SRC haskell
:{
monoidRightIdentityProperty :: (Eq m, Monoid m) => m -> Bool
monoidRightIdentityProperty x = x <> mempty == x
:}
#+END_SRC

#+BEGIN_SRC haskell
import Data.Monoid
import Test.QuickCheck

<<monoid-left-identity-property>>
<<monoid-right-identity-property>>
<<quickcheck-with-output>>

quickCheckWithOutput (forAll arbitrary monoidLeftIdentityProperty)
quickCheckWithOutput (forAll arbitrary monoidRightIdentityProperty)

:seti -XTypeApplications

quickCheckWithOutput (forAll arbitrary (monoidLeftIdentityProperty @String))
quickCheckWithOutput (forAll arbitrary (monoidRightIdentityProperty @String))

quickCheckWithOutput (forAll arbitrary (monoidLeftIdentityProperty @All))
quickCheckWithOutput (forAll arbitrary (monoidRightIdentityProperty @Any))
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
+++ OK, passed 100 tests.\n
+++ OK, passed 100 tests.\n
+++ OK, passed 100 tests.\n
+++ OK, passed 100 tests.\n
+++ OK, passed 100 tests.\n
+++ OK, passed 100 tests.\n
#+END_EXAMPLE

Catching an invalid ~Monoid~ instance

#+NAME: monoid-properties
#+BEGIN_SRC haskell
<<monoid-associativity-property>>
<<monoid-left-identity-property>>
<<monoid-right-identity-property>>
#+END_SRC

#+BEGIN_SRC haskell
import Control.Monad
import Test.QuickCheck
import Data.Monoid

data Bull = Fools | Twoo deriving (Eq, Show)

:{
instance Arbitrary Bull where
  arbitrary = elements [Fools, Twoo]
:}

-- We need to demonstrate that this is not a valid instance of Monoid
:{
instance Semigroup Bull where
  _ <> _ = Fools

instance Monoid Bull where
  mempty = Fools
:}

<<monoid-properties>>
<<quickcheck-with-output>>

:seti -XTypeApplications

quickCheckWithOutput (forAll arbitrary (monoidAssociativityProperty @Bull))
quickCheckWithOutput (forAll arbitrary (monoidLeftIdentityProperty @Bull))
quickCheckWithOutput (forAll arbitrary (monoidRightIdentityProperty @Bull))
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
+++ OK, passed 100 tests.\n
,*** Failed! Falsified (after 4 tests):\nTwoo\n
,*** Failed! Falsified (after 2 tests):\nTwoo\n
#+END_EXAMPLE

** Exercise: Maybe Another Monoid
Write a ~Monoid~ instance for ~Optional~ type which respects the
following expectations and which is lawful.

#+BEGIN_EXAMPLE
Prelude> First' (Only 1) <> First' Nada
First' {getFirst = Only 1}

Prelude> First' Nada <> First' Nada
First' {getFirst = Nada}

Prelude> First' Nada <> First' (Only 2)
First' {getFirst = Only 2}

Prelude> First' (Only 1) <> First' (Only 2)
First' {getFirst = Only 1}
#+END_EXAMPLE

#+BEGIN_SRC haskell
import Data.Monoid
import Test.QuickCheck

<<optional-definition>>

newtype First' a = First' {getFirst :: Optional a} deriving (Eq, Show)

:{
instance Semigroup (First' a) where
  x@(First' (Only _)) <> _ = x
  _ <> y = y

instance Monoid (First' a) where
  mempty = First' Nada
:}

:{
instance Arbitrary a => Arbitrary (First' a) where
  arbitrary = do
    x <- arbitrary
    elements [First' {getFirst = Only x}, First' {getFirst = Nada}]
:}

<<monoid-properties>>
<<quickcheck-with-output>>

:seti -XTypeApplications

quickCheckWithOutput (forAll arbitrary (monoidAssociativityProperty @(First' String)))
quickCheckWithOutput (forAll arbitrary (monoidLeftIdentityProperty @(First' String)))
quickCheckWithOutput (forAll arbitrary (monoidRightIdentityProperty @(First' String)))

import Control.Exception (assert)
assert ((First' (Only 1)) <> (First' Nada)     == (First' (Only 1))) "Ok!"
assert ((First' Nada)     <> (First' Nada)     == (First' Nada)) "Ok!"
assert ((First' Nada)     <> (First' (Only 2)) == (First' (Only 2))) "Ok!"
assert ((First' (Only 1)) <> (First' (Only 2)) == (First' (Only 1))) "Ok!"
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
+++ OK, passed 100 tests.\n
+++ OK, passed 100 tests.\n
+++ OK, passed 100 tests.\n
Ok!
Ok!
Ok!
Ok!
#+END_EXAMPLE

* 15.13 Semigroup
The definition of ~Semigroup~ is the following aka a binary
associative operation. A ~Monoid~ is also a ~Semigroup~

#+BEGIN_SRC haskell :eval never
class Semigroup where
  (<>) :: a -> a -> a
#+END_SRC

A useful type that is ~Semigroup~ but not a ~Monoid~ is ~NotEmpty~

#+BEGIN_SRC haskell :eval never
data NonEmpty = a :| [a] deriving (Eq, Ord, Show)
#+END_SRC

Here ~:|~ is an infix data constructor that takes two arguments, data
constructors with only nonalphanumeric characters that begins with ~:~
is infix by default

#+BEGIN_SRC haskell
import Data.List.NonEmpty as N
import Data.Semigroup as S

1 :| [2, 3, 4]
:t 1 :| [2, 3, 4]
:t (<>)
xs = 1 :| [2, 3]
ys = 4 :| [5, 6]
xs <> ys
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
1 :| [2,3,4]
1 :| [2, 3, 4] :: Num a => NonEmpty a
(<>) :: Semigroup a => a -> a -> a
1 :| [2,3,4,5,6]
#+END_EXAMPLE

* 15.14 Strength can be Weakness
An /algebra/ is /stronger/ than another when it provides more
operations aka it is stronger when you can do more without knowing the
specific type you are working with.

Not always stronger is better because there are useful datatypes that
cannot satisfy certain laws.

Strength: /Magma/ -> /Semigroup/ -> /Monoid/ -> /Abelian-Monoid/

* Exercises
** Semigroup Exercises
Given a type implement the ~Semigroup~ instance. Add ~Semigroup~
constraints to type variables when needed. Use
~Data.Semigroup~. Validate all the instances with ~QuickCheck~

#+NAME: semigroup-associativity-property
#+BEGIN_SRC haskell
:{
semigroupAssociativityProperty :: (Eq m, Semigroup m) => m -> m -> m -> Bool
semigroupAssociativityProperty x y z = (x <> y) <> z == x <> (y <> z)
:}
#+END_SRC


1. Implement the ~Semigroup~ instance for the following type
   #+NAME: semigroup-trivial
   #+BEGIN_SRC haskell :eval never
   import Data.Semigroup
   import Test.QuickCheck

   data Trivial = Trivial deriving (Eq, Show)

   :{
   instance Arbitrary Trivial where
     arbitrary = return Trivial
   :}

   :{
   instance Semigroup Trivial where
     (<>) _ _ = Trivial
   :}
   #+END_SRC

   #+BEGIN_SRC haskell
   <<semigroup-trivial>>
   <<semigroup-associativity-property>>
   <<quickcheck-with-output>>
   :seti -XTypeApplications

   quickCheckWithOutput (forAll arbitrary (semigroupAssociativityProperty @Trivial))
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

2. Implement the ~Semigroup~ instance for the following type
   #+NAME: semigroup-identity
   #+BEGIN_SRC haskell :eval never
   import Data.Semigroup
   import Test.QuickCheck

   newtype Identity a = Identity a deriving (Eq, Show)

   :{
   instance (Arbitrary a) => Arbitrary (Identity a) where
     arbitrary = do
       x <- arbitrary
       return $ Identity x
   :}

   :{
   instance (Semigroup a) => Semigroup (Identity a) where
     (<>) (Identity x) (Identity y) = Identity (x <> y)
   :}
   #+END_SRC

   #+BEGIN_SRC haskell
   <<semigroup-identity>>
   <<semigroup-associativity-property>>
   <<quickcheck-with-output>>

   :seti -XTypeApplications
   quickCheckWithOutput (forAll arbitrary (semigroupAssociativityProperty @(Identity String)))
   quickCheckWithOutput (forAll arbitrary (semigroupAssociativityProperty @(Identity [Int])))
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

3. Implement the ~Semigroup~ instance for the following type
   #+NAME: semigroup-two
   #+BEGIN_SRC haskell :eval never
   import Data.Semigroup
   import Test.QuickCheck

   data Two a b = Two a b deriving (Eq, Show)

   :{
   instance (Arbitrary a, Arbitrary b) => Arbitrary (Two a b) where
     arbitrary = do
       a <- arbitrary
       b <- arbitrary
       return $ Two a b
   :}

   :{
   instance (Semigroup a, Semigroup b) => Semigroup (Two a b) where
     (Two al bl) <> (Two ar br) = Two (al <> ar) (bl <> br)
   :}
   #+END_SRC

   #+BEGIN_SRC haskell
   <<semigroup-two>>
   <<semigroup-associativity-property>>
   <<quickcheck-with-output>>

   :seti -XTypeApplications
   quickCheckWithOutput (forAll arbitrary (semigroupAssociativityProperty @(Two String String)))
   quickCheckWithOutput (forAll arbitrary (semigroupAssociativityProperty @(Two String (Sum Int))))
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

4. Implement the ~Semigroup~ instance for the following type
   #+NAME: semigroup-three
   #+BEGIN_SRC haskell
   import Data.Semigroup
   import Test.QuickCheck

   data Three a b c = Three a b c deriving (Eq, Show)

   :{
   instance (Arbitrary a, Arbitrary b, Arbitrary c) => Arbitrary (Three a b c) where
     arbitrary = do
       a <- arbitrary
       b <- arbitrary
       c <- arbitrary
       return $ Three a b c
   :}

   :{
   instance (Semigroup a, Semigroup b, Semigroup c) => Semigroup (Three a b c) where
     (Three al bl cl) <> (Three ar br cr) = Three (al <> ar) (bl <> br) (cl <> cr)
   :}
   #+END_SRC

   #+BEGIN_SRC haskell
   <<semigroup-three>>
   <<semigroup-associativity-property>>
   <<quickcheck-with-output>>

   :seti -XTypeApplications
   quickCheckWithOutput (forAll arbitrary (semigroupAssociativityProperty @(Three String String String)))
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

5. Implement the ~Semigroup~ instance for the following type
   #+NAME: semigroup-four
   #+BEGIN_SRC haskell
   import Data.Semigroup
   import Test.QuickCheck

   data Four a b c d = Four a b c d deriving (Eq, Show)

   :{
   instance (Arbitrary a, Arbitrary b, Arbitrary c, Arbitrary d) => Arbitrary (Four a b c d) where
     arbitrary = do
       a <- arbitrary
       b <- arbitrary
       c <- arbitrary
       d <- arbitrary
       return $ Four a b c d
   :}

   :{
   instance (Semigroup a, Semigroup b, Semigroup c, Semigroup d) => Semigroup (Four a b c d) where
     (Four al bl cl dl) <> (Four ar br cr dr) = Four (al <> ar) (bl <> br) (cl <> cr) (dl <> dr)
   :}
   #+END_SRC

   #+BEGIN_SRC haskell
   <<semigroup-four>>
   <<semigroup-associativity-property>>
   <<quickcheck-with-output>>

   :seti -XTypeApplications
   quickCheckWithOutput (forAll arbitrary (semigroupAssociativityProperty @(Four String String String String)))
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

6. Implement the ~Semigroup~ instance for the following type
   #+NAME: semigroup-boolean-conjunction
   #+BEGIN_SRC haskell :eval never
   import Data.Semigroup
   import Test.QuickCheck

   data BoolConjunction = BoolConjunction Bool deriving (Eq, Show)

   :{
   instance Arbitrary BoolConjunction where
     arbitrary = do
       b <- arbitrary
       return $ BoolConjunction b
   :}

   :{
   instance Semigroup BoolConjunction where
     (BoolConjunction True) <> (BoolConjunction True) = BoolConjunction True
     _                      <> _                      = BoolConjunction False
   :}
   #+END_SRC

   #+BEGIN_SRC haskell
   <<semigroup-boolean-conjunction>>
   <<semigroup-associativity-property>>
   <<quickcheck-with-output>>

   :seti -XTypeApplications
   quickCheckWithOutput (forAll arbitrary (semigroupAssociativityProperty @BoolConjunction))
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

7. Implement the ~Semigroup~ instance for the following type
   #+NAME: semigroup-boolean-disjunction
   #+BEGIN_SRC haskell :eval never
   import Data.Semigroup
   import Test.QuickCheck

   data BoolDisjunction = BoolDisjunction Bool deriving (Eq, Show)

   :{
   instance Arbitrary BoolDisjunction where
     arbitrary = do
       b <- arbitrary
       return $ BoolDisjunction b
   :}

   :{
   instance Semigroup BoolDisjunction where
     (BoolDisjunction False) <> (BoolDisjunction False) = (BoolDisjunction False)
     _                       <> _                       = (BoolDisjunction True)
   :}
   #+END_SRC

   #+BEGIN_SRC haskell
   <<semigroup-boolean-disjunction>>
   <<semigroup-associativity-property>>
   <<quickcheck-with-output>>

   :seti -XTypeApplications
   quickCheckWithOutput (forAll arbitrary (semigroupAssociativityProperty @BoolDisjunction))
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

8. Implement the ~Semigroup~ instance for the following type
   #+NAME: semigroup-or
   #+BEGIN_SRC haskell
   import Data.Semigroup
   import Test.QuickCheck

   data Or a b = Fst a | Snd b deriving (Eq, Show)

   -- Fst 1 <> Snd 2 == Snd 2
   -- Fst 1 <> Fst 2 == Fst 2
   -- Snd 1 <> Fst 2 == Snd 1
   -- Snd 1 <> Snd 2 == Snd 1

   :{
   instance (Arbitrary a, Arbitrary b) => Arbitrary (Or a b) where
     arbitrary = do
       a <- arbitrary
       b <- arbitrary
       elements [Fst a, Snd b]
   :}

   :{
   instance Semigroup (Or a b) where
     x@(Snd _) <> _ = x
     _         <> y = y
   :}
   #+END_SRC

   #+BEGIN_SRC haskell
   <<semigroup-or>>
   <<semigroup-associativity-property>>
   <<quickcheck-with-output>>

   :seti -XTypeApplications
   quickCheckWithOutput (forAll arbitrary (semigroupAssociativityProperty @(Or String String)))
   quickCheckWithOutput (forAll arbitrary (semigroupAssociativityProperty @(Or Int String)))

   import Control.Exception (assert)
   assert (Fst 1 <> Snd 2 == Snd 2) "Ok!"
   assert (Fst 1 <> Fst 2 == Fst 2) "Ok!"
   assert (Snd 1 <> Fst 2 == Snd 1) "Ok!"
   assert (Snd 1 <> Snd 2 == Snd 1) "Ok!"
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   Ok!
   Ok!
   Ok!
   Ok!
   #+END_EXAMPLE

9. Implement the ~Semigroup~ instance for the following type
   #+NAME: semigroup-combine
   #+BEGIN_SRC haskell :eval never
   import Data.Semigroup
   import Test.QuickCheck

   newtype Combine a b = Combine {unCombine :: (a -> b)}

   :{
   instance (CoArbitrary a, Arbitrary b) => Arbitrary (Combine a b) where
     arbitrary = do
       (Blind f) <- arbitrary
       return $ Combine f
   :}

   :{
   instance (Semigroup b) => Semigroup (Combine a b) where
     (Combine fl) <> (Combine fr) = Combine (fl <> fr)
   :}
   #+END_SRC

   #+BEGIN_SRC haskell
   <<semigroup-combine>>
   <<quickcheck-with-output>>

   :{
   associativityProperty :: (Eq b, Semigroup b) => Blind (a -> b) -> Blind (a -> b) -> Blind (a -> b) -> a ->  Bool
   associativityProperty (Blind f) (Blind g) (Blind h) a =
     (unCombine (cf <> (cg <> ch)) $ a) == (unCombine ((cf <> cg) <> ch) $ a)
     where cf = Combine f
           cg = Combine g
           ch = Combine h
   :}

   :seti -XTypeApplications
   quickCheckWithOutput (forAll arbitrary (associativityProperty @String @String))
   quickCheckWithOutput (forAll arbitrary (associativityProperty @String @Int))

   f = Combine $ \n -> Sum (n + 1)
   g = Combine $ \n -> Sum (n - 1)

   import Control.Exception (assert)
   assert ((unCombine (f <> g) $ 0) == (Sum 0)) "Ok!"
   assert ((unCombine (f <> g) $ 1) == (Sum 2)) "Ok!"
   assert ((unCombine (f <> f) $ 1) == (Sum 4)) "Ok!"
   assert ((unCombine (g <> f) $ 1) == (Sum 2)) "Ok!"
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   Ok!
   Ok!
   Ok!
   Ok!
   #+END_EXAMPLE

10. Implement the ~Semigroup~ instance for the following type
    #+NAME: semigroup-compose
    #+BEGIN_SRC haskell :eval never
    import Data.Semigroup
    import Test.QuickCheck

    newtype Compose a = Compose {unCompose :: (a -> a)}

    -- Hint: do something more intuitive to combine the inner functions since domain and codomain are the same

    :{
    instance (CoArbitrary a, Arbitrary a) => Arbitrary (Compose a) where
      arbitrary = do
        f <- arbitrary
        return $ Compose f
    :}

    :{
    instance Semigroup (Compose a) where
      (Compose f) <> (Compose g) = Compose $ g . f
    :}
    #+END_SRC

    #+BEGIN_SRC haskell
    <<semigroup-compose>>
    <<quickcheck-with-output>>

    :{
    associativeProperty :: (Eq a) => Blind (a -> a) -> Blind (a -> a) -> Blind (a -> a) -> a -> Bool
    associativeProperty (Blind f) (Blind g) (Blind h) a =
      (unCompose (cf <> (cg <> ch)) $ a) == (unCompose ((cf <> cg) <> ch) $ a)
      where cf = Compose f
            cg = Compose g
            ch = Compose h
    :}

    :seti -XTypeApplications
    quickCheckWithOutput (forAll arbitrary (associativityProperty @String))
    #+END_SRC

    #+RESULTS:
    #+BEGIN_EXAMPLE
    +++ OK, passed 100 tests.\n
    #+END_EXAMPLE

11. Given the following code we expect a certain output (commented at the end)
    #+NAME: semigroup-validation
    #+BEGIN_SRC haskell :eval never
    import Data.Semigroup
    import Test.QuickCheck

    data Validation a b = Failure a | Success b deriving (Eq, Show)

    :{
    instance (Arbitrary a, Arbitrary b) => Arbitrary (Validation a b) where
      arbitrary = do
        a <- arbitrary
        b <- arbitrary
        elements [Failure a, Success b]
    :}

    :{
    instance (Semigroup a) => Semigroup (Validation a b) where
      (Failure al)  <> (Failure ar)  = Failure (al <> ar)
      x@(Success _) <> _             = x
      _             <> x@(Success _) = x
    :}
    #+END_SRC

    #+BEGIN_SRC haskell
    <<semigroup-validation>>
    <<semigroup-associativity-property>>
    <<quickcheck-with-output>>

    :seti -XTypeApplications
    quickCheckWithOutput (forAll arbitrary (semigroupAssociativityProperty @(Validation String Int)))

    import Control.Exception (assert)
    assert (Success 1 <> Failure "blah" == Success 1) "Ok!"
    assert (Failure "woot" <> Failure "blah" == Failure "wootblah") "Ok!"
    assert (Success 1 <> Success 2 == Success 1) "Ok!"
    assert (Failure "woot" <> Success 2 == Success 2) "Ok!"
    #+END_SRC

    #+RESULTS:
    #+BEGIN_EXAMPLE
    +++ OK, passed 100 tests.\n
    Ok!
    Ok!
    Ok!
    Ok!
    #+END_EXAMPLE

** Monoid Exercises
Given a datatype, implement the Monoid instance. Add Monoid
constraints to type variables where needed. For the datatypes you have
already implemented Semigroup instances for, you need to figure out
what the identity value is.

1. Implement the ~Monoid~ instance for the following type
   #+BEGIN_SRC haskell
   <<semigroup-trivial>>

   :{
   instance Monoid Trivial where
      mempty = Trivial
   :}

   <<monoid-properties>>
   <<quickcheck-with-output>>

   :seti -XTypeApplications

   quickCheckWithOutput (forAll arbitrary (monoidAssociativityProperty @Trivial))
   quickCheckWithOutput (forAll arbitrary (monoidLeftIdentityProperty @Trivial))
   quickCheckWithOutput (forAll arbitrary (monoidRightIdentityProperty @Trivial))
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

2. Implement the ~Monoid~ instance for the following type
   #+BEGIN_SRC haskell
   <<semigroup-identity>>

   :{
   instance (Monoid a) => Monoid (Identity a) where
     mempty = Identity mempty
   :}

   <<monoid-properties>>
   <<quickcheck-with-output>>

   :seti -XTypeApplications

   quickCheckWithOutput (forAll arbitrary (monoidAssociativityProperty @(Identity String)))
   quickCheckWithOutput (forAll arbitrary (monoidLeftIdentityProperty @(Identity String)))
   quickCheckWithOutput (forAll arbitrary (monoidRightIdentityProperty @(Identity String)))
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE


3. Implement the ~Monoid~ instance for the following type
   #+BEGIN_SRC haskell
   <<semigroup-two>>

   :{
   instance (Monoid a, Monoid b) => Monoid (Two a b) where
     mempty = Two mempty mempty
   :}

   <<monoid-properties>>
   <<quickcheck-with-output>>

   :seti -XTypeApplications

   quickCheckWithOutput (forAll arbitrary (monoidAssociativityProperty @(Two String String)))
   quickCheckWithOutput (forAll arbitrary (monoidLeftIdentityProperty @(Two String String)))
   quickCheckWithOutput (forAll arbitrary (monoidRightIdentityProperty @(Two String String)))
   quickCheckWithOutput (forAll arbitrary (monoidAssociativityProperty @(Two String (Sum Int))))
   quickCheckWithOutput (forAll arbitrary (monoidLeftIdentityProperty @(Two String (Sum Int))))
   quickCheckWithOutput (forAll arbitrary (monoidRightIdentityProperty @(Two String (Sum Int))))
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

4. Implement the ~Monoid~ instance for the following type
   #+BEGIN_SRC haskell
   <<semigroup-boolean-conjunction>>

   :{
   instance Monoid BoolConjunction where
     mempty = BoolConjunction True
   :}

   <<monoid-properties>>
   <<quickcheck-with-output>>

   :seti -XTypeApplications

   quickCheckWithOutput (forAll arbitrary (monoidAssociativityProperty @BoolConjunction))
   quickCheckWithOutput (forAll arbitrary (monoidLeftIdentityProperty @BoolConjunction))
   quickCheckWithOutput (forAll arbitrary (monoidRightIdentityProperty @BoolConjunction))
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

5. Implement the ~Monoid~ instance for the following type
   #+BEGIN_SRC haskell
   <<semigroup-boolean-disjunction>>

   :{
   instance Monoid BoolDisjunction where
     mempty = BoolDisjunction False
   :}

   <<monoid-properties>>
   <<quickcheck-with-output>>

   :seti -XTypeApplications

   quickCheckWithOutput (forAll arbitrary (monoidAssociativityProperty @BoolDisjunction))
   quickCheckWithOutput (forAll arbitrary (monoidLeftIdentityProperty @BoolDisjunction))
   quickCheckWithOutput (forAll arbitrary (monoidRightIdentityProperty @BoolDisjunction))
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

6. Implement the ~Monoid~ instance for the following type
   #+BEGIN_SRC haskell
   <<semigroup-combine>>

   :{
   instance (Monoid b) => Monoid (Combine a b) where
     mempty = Combine $ const mempty
   :}

   :{
   leftIdentity :: (Eq b, Monoid b) => Blind (a -> b) -> a -> Bool
   leftIdentity (Blind f) a = (unCombine (mempty <> (Combine f)) $ a) == f a
   :}

   :{
   rightIdentity :: (Eq b, Monoid b) => Blind (a -> b) -> a -> Bool
   rightIdentity (Blind f) a = (unCombine ((Combine f) <> mempty) $ a) == f a
   :}

   <<quickcheck-with-output>>

   :seti -XTypeApplications

   quickCheckWithOutput (forAll arbitrary (leftIdentity @String @String))
   quickCheckWithOutput (forAll arbitrary (rightIdentity @String @String))
   quickCheckWithOutput (forAll arbitrary (leftIdentity @String @Int))
   quickCheckWithOutput (forAll arbitrary (rightIdentity @String @Int))
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

7. Implement the ~Monoid~ instance for the following type
   #+BEGIN_SRC haskell
   <<semigroup-compose>>

   :{
   instance Monoid (Compose a) where
     mempty = Compose $ id
   :}

   :{
   leftIdentity :: (Eq a, Monoid a) => Blind (a -> a) -> a -> Bool
   leftIdentity (Blind f) x = (unCompose (mempty <> (Compose f)) $ x) == f x
   :}

   :{
   rightIdentity :: (Eq a, Monoid a) => Blind (a -> a) -> a -> Bool
   rightIdentity (Blind f) x = (unCompose ((Compose f) <> mempty) $ x) == f x
   :}

   <<quickcheck-with-output>>

   :seti -XTypeApplications

   quickCheckWithOutput (forAll arbitrary (leftIdentity @String))
   quickCheckWithOutput (forAll arbitrary (rightIdentity @String))
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE

8. Implement the ~Monoid~ instance for the following type
   #+BEGIN_SRC haskell
   import Data.Monoid
   import Test.QuickCheck

   newtype Mem s a = Mem { runMem :: s -> (a, s) }

   :{
   instance (Semigroup a) => Semigroup (Mem s a) where
     (Mem f) <> (Mem g) = Mem $ h
       where h s = let (a, s') = f s
                       (a', s'') = g s'
                   in (a <> a', s'')
   :}


   :{
   instance (Monoid a) => Monoid (Mem s a) where
     mempty = Mem $ \s -> (mempty, s)
     -- mempty = Mem $ (,) mempty
   :}

   :{
   associativityProperty :: (Monoid a, Eq a, Eq s) => Blind (s -> (a, s)) -> Blind (s -> (a, s)) -> Blind (s -> (a, s)) -> s -> Bool
   associativityProperty (Blind f) (Blind g) (Blind h) s =
     (runMem (mf <> (mg <> mh)) s) == (runMem ((mf <> mg) <> mh) s)
     where mf = Mem f
           mg = Mem g
           mh = Mem h
   :}

   :{
   leftIdentityProperty :: (Monoid a, Eq a, Eq s) => Blind (s -> (a, s)) -> s -> Bool
   leftIdentityProperty (Blind f) s = (runMem (mempty <> (Mem f)) s) == (f s)
   :}

   :{
   rightIdentityProperty :: (Monoid a, Eq a, Eq s) => Blind (s -> (a, s)) -> s -> Bool
   rightIdentityProperty (Blind f) s = (runMem ((Mem f) <> mempty) s) == (f s)
   :}

   import Control.Exception (assert)

   f' = Mem $ \s -> ("hi", s + 1)
   assert (runMem (f' <> mempty) 0 == ("hi", 1)) "Ok!"
   assert (runMem (mempty <> f') 0 == ("hi", 1)) "Ok!"
   assert (runMem mempty 0 == ("", 0)) "Ok!"
   assert (runMem (f' <> mempty) 0 == runMem f' 0) "Ok!"
   assert (runMem (f' <> mempty) 0 == runMem (mempty <> f') 0) "Ok!"

   <<quickcheck-with-output>>

   :seti -XTypeApplications

   quickCheckWithOutput (forAll arbitrary (associativityProperty @String @String))
   quickCheckWithOutput (forAll arbitrary (leftIdentityProperty @String @String))
   quickCheckWithOutput (forAll arbitrary (rightIdentityProperty @String @String))
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   Ok!
   Ok!
   Ok!
   Ok!
   Ok!
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   +++ OK, passed 100 tests.\n
   #+END_EXAMPLE
