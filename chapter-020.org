# -*- eval: (org-babel-lob-ingest "./ob-haskell-common.org"); -*-

#+TITLE: Foldable

#+PROPERTY: header-args:haskell :results replace output
#+PROPERTY: header-args:haskell+ :noweb yes
#+PROPERTY: header-args:haskell+ :wrap EXAMPLE

* 20.01 Foldable
Lists are not the only foldable thing, there's a general notion of
catamorphism, generalizing catamorphism for other datatypes involves
knowing and understanding the monoidal behaviour of those datatypes.

* 20.02 The Foldable Class
Foldable class: "A class of data structures that can be folded to a
summary value".

#+BEGIN_SRC haskell :eval never
class Foldable (t :: * -> *) where
  {-# MINIMAL foldMap | foldr #-}
#+END_SRC

~t~ is a higher-kinded type. For type constructors with more than one
parameter (eg. ~Either~ or ~Tuple~) then one or more type parameters
need to be part of the structure.

* 20.03 Revenge of the Monoids
Folding necessarily implies a binary associative operation with an
identity value. The first two operations defined in ~Foldable~ makes
it explicit.

#+BEGIN_SRC haskell :eval never
class Foldable (t :: * -> *) where
  fold :: Monoid m => t m -> m
  foldMap :: Monoid m => (a -> m) -> t a -> m
  -- ...
#+END_SRC

- ~fold~ allows to combine elements inside a ~Foldable~ using the
  instance of ~Monoid~ defined for those elements.

- ~foldMap~ maps elements inside of ~Foldable~ (~a~) to values for
  which an instance of ~Monoid~ is defined and then use that to
  combine them.

#+BEGIN_SRC haskell
import Data.Monoid (Sum, First)
import Data.Foldable (fold, foldMap)

-- The original without exploiting monoid instances but with an
-- explicit associative operation
foldr (+) 0 [1..5]

-- Using a Monoid implemented on a newtype (Sum)
fold $ Sum <$> [1..5]

-- Using a Monoid implemented on String
fold ["Hello", " ", "World", "!"]

-- Using foldMap
foldMap Sum [1..5]
foldMap All [True, False, True]
foldMap First [Nothing, Just 2, Nothing, Nothing, Just 5]
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
15
Sum {getSum = 15}
"Hello World!"
Sum {getSum = 15}
All {getAll = False}
First {getFirst = Just 2}
#+END_EXAMPLE

NOTE: The following works because ~Sum~ has an instance of ~Num~ so a
literal number can be coerced to ~Sum~

#+BEGIN_SRC haskell
:t 5
:t 5 :: Sum Integer
(5 :: Sum Integer)
([1, 2, 3, 4] :: [Sum Integer])
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
5 :: Num p => p
5 :: Sum Integer :: Sum Integer
Sum {getSum = 5}
[Sum {getSum = 1},Sum {getSum = 2},Sum {getSum = 3},Sum {getSum = 4}]
#+END_EXAMPLE

* 20.04 Demonstrating Foldable Instances
To implement ~Foldable~ we only need to implment ~fold~ or ~foldMap~
because both can be implemented with the other.

** Identity
#+BEGIN_SRC haskell
import Data.Foldable
import Data.Monoid

data Identity a = Identity a deriving (Eq, Show)

:{
instance Foldable Identity where
  -- foldr :: (a -> b -> b) -> b -> t a -> b
  foldr f z (Identity x) = f x z

  -- foldl :: (b -> a -> b) -> b -> t a -> b
  foldl f z (Identity x) = f z x

  -- foldMap :: Monoid m => (a -> m) -> t a -> m
  foldMap f (Identity x) = f x
:}

foldr (*) 1 (Identity 5)
foldr (*) 2 (Identity 5)

foldl (*) 1 (Identity 5)
foldl (*) 2 (Identity 5)

foldMap Sum (Identity 5)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
5
10
5
10
Sum {getSum = 5}
#+END_EXAMPLE

It may seem strange to think of folding one value. When we've talked
about catamorphisms previously, we've focused on how they can reduce a
bunch of values down to one summary value. In the case of this
Identity catamorphism, the point is less to reduce the values inside
the structure to one value and more to consume, or use, the value
inside the structure.

** Maybe
We need to find a /zero/ for the case where we have no value to apply
the function to.

#+BEGIN_SRC haskell
data Optional a = Some a | None deriving (Eq, Show)

:{
instance Foldable Optional where
  foldr _ z None = z
  foldr f z (Some x) = f x z

  foldl _ z None = z
  foldl f z (Some x) = f z x

  foldMap _ None = mempty
  foldMap f (Some x) = f x
:}

foldr (+) 1 None
foldr (+) 1 (Some 1)

foldl (+) 1 None
foldl (+) 1 (Some 1)

-- We need to specify the type because it needs a Monoid instance
foldMap (+1) (None :: Optional (Data.Monoid.Sum Integer))
foldMap (+1) (Some (Data.Monoid.Sum 1))
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
1
2
1
2
Sum {getSum = 0}
Sum {getSum = 2}
#+END_EXAMPLE

* 20.05 Some Basic Derived Operations
** toList
Transforms a ~Foldable~ of ~a~ into a list of ~a~

#+BEGIN_SRC haskell
import Data.Foldable

:t toList

toList [1]
toList [1, 2, 3]
toList $ Just 1
toList $ Nothing
toList $ (1, 2)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
toList :: Foldable t => t a -> [a]
[1]
[1,2,3]
[1]
[]
[2]
#+END_EXAMPLE

** null
Tests whether the structure is empty

#+BEGIN_SRC haskell
import Data.Foldable

:t null

null []
null [1, 2, 3]
null $ Just 1
null Nothing
null (1, 2)
null (Nothing, Nothing)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
null :: Foldable t => t a -> Bool
True
False
False
True
False
False
#+END_EXAMPLE

** length
Returns how many values inhabit the ~Foldable~ structure

#+BEGIN_SRC haskell
import Data.Foldable

:t length

length []
length [1, 2, 3]
length $ Just 1
length Nothing
length $ Just [1, 2, 3]
length (1, 2)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
length :: Foldable t => t a -> Int
0
3
1
0
1
1
#+END_EXAMPLE

** elem
Tests whether the structure contains an element, in a ~Foldable a~
requires ~Eq~ for ~a~

#+BEGIN_SRC haskell
import Data.Foldable

:t elem

elem 3 $ Just 3
elem 3 $ Just 4
elem 3 Nothing
elem 3 [1, 2, 3]
elem 3 [1, 2, 4]
elem 3 $ Left 3
elem 3 $ Right 3
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
elem :: (Foldable t, Eq a) => a -> t a -> Bool
True
False
False
True
False
False
True
#+END_EXAMPLE

** maximum and minimum
Returns the maximum and minimum of the elements in the structure, In a
~Foldable a~ they require ~Ord~ for ~a~

#+BEGIN_SRC haskell
:t maximum
:t minimum
maximum [1, 2, 3]
minimum [1, 2, 3]
maximum $ Just 3
maximum Nothing
maximum $ Right 3
maximum $ Left 3
maximum (1, 2)
maximum (2, 1)
maximum "abcd"
minimum "abcd"
maximum "dcba"
minimum "dcba"
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
maximum :: (Foldable t, Ord a) => t a -> a
minimum :: (Foldable t, Ord a) => t a -> a
3
1
3
,*** Exception: maximum: empty structure
3
,*** Exception: maximum: empty structure
2
1
'd'
'a'
'd'
'a'
#+END_EXAMPLE

** sum and product
Returns the sum and product of the elements in the structure, In a
~Foldable a~ they require ~Num~ for ~a~

#+BEGIN_SRC haskell
:t sum
:t product
sum [1, 2, 3]
product [1, 2, 3]
sum $ Just 1
sum Nothing
product $ Just 1
product Nothing
sum (1, 2)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
sum :: (Foldable t, Num a) => t a -> a
product :: (Foldable t, Num a) => t a -> a
6
6
1
0
1
1
2
#+END_EXAMPLE

** Exercise: Library Functions
Implement the following library functions with ~foldr~ or ~foldMap~
from ~Foldable~

1. Implement ~sum~
   #+BEGIN_SRC haskell
   import Data.Monoid

   :{
   sum' :: (Foldable f, Num a) => f a -> a
   sum' = getSum . foldMap Sum
   :}

   sum' [1, 2, 3]
   sum' $ Just 1
   sum' $ Nothing
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   6
   1
   0
   #+END_EXAMPLE

2. Implement ~product~
   #+BEGIN_SRC haskell
   import Data.Monoid

   :{
   product' :: (Foldable f, Num a) => f a -> a
   product' = getProduct . foldMap Product
   :}

   product' [1, 2, 3]
   product' $ Just 1
   product' Nothing
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   6
   1
   1
   #+END_EXAMPLE

3. Implement ~elem~
   #+BEGIN_SRC haskell
   import Data.Foldable

   :{
   elem' :: (Foldable f, Eq a) => a -> f a -> Bool
   elem' e = getAny . foldMap (Any . (== e))
   :}

   elem' 3 [1, 2, 3]
   elem' 4 [1, 2, 3]
   elem' 1 $ Just 1
   elem' 1 $ Just 3
   elem' 1 Nothing
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   True
   False
   True
   False
   False
   #+END_EXAMPLE

4. Implement ~minimum~
   #+BEGIN_SRC haskell
   import Data.Monoid

   :{
   minimum' :: (Foldable f, Ord a, Bounded a) => f a -> a
   minimum' = foldr min maxBound
   :}

   :{
   minimum'' :: (Foldable f, Ord a, Bounded a) => f a -> a
   minimum'' = getMin . foldMap Min
   :}

   minimum' $ Just 1 :: Int
   minimum' $ [1, 2, 3 :: Int]
   minimum' $ ([] :: [Int])

   minimum'' $ Just 1 :: Int
   minimum'' $ [1, 2, 3 :: Int]
   minimum'' $ ([] :: [Int])
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   1
   1
   9223372036854775807
   1
   1
   9223372036854775807
   #+END_EXAMPLE

5. Implement ~maximum~
   #+BEGIN_SRC haskell
   import Data.Monoid

   :{
   maximum' :: (Foldable f, Ord a, Bounded a) => f a -> a
   maximum' = foldr max minBound
   :}

   :{
   maximum'' :: (Foldable f, Ord a, Bounded a) => f a -> a
   maximum'' = getMax . foldMap Max
   :}

   maximum' $ Just 1 :: Int
   maximum' $ [1, 2, 3 :: Int]
   maximum' $ ([] :: [Int])

   maximum'' $ Just 1 :: Int
   maximum'' $ [1, 2, 3 :: Int]
   maximum'' $ ([] :: [Int])
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   1
   3
   -9223372036854775808
   1
   3
   -9223372036854775808
   #+END_EXAMPLE

6. Implement ~null~
   #+BEGIN_SRC haskell
   import Data.Monoid

   :{
   null' :: (Foldable f) => f a -> Bool
   null' = not . getAny . foldMap (const $ Any True)
   :}

   :{
   null'' :: (Foldable f) => f a -> Bool
   null'' = foldr ((const . const) False) True
   :}

   :{
   null''' :: (Foldable f) => f a -> Bool
   null''' = (> 0) . length
   :}

   null' [1, 2, 3]
   null' []
   null' $ Just 1
   null' Nothing

   null'' [1, 2, 3]
   null'' []
   null'' $ Just 1
   null'' Nothing

   null''' [1, 2, 3]
   null''' []
   null''' $ Just 1
   null''' Nothing
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   False
   True
   False
   True
   False
   True
   False
   True
   True
   False
   True
   False
   #+END_EXAMPLE

7. Implement ~length~
   #+BEGIN_SRC haskell
   import Data.Monoid
   import Data.Foldable

   :{
   length' :: (Foldable f) => f a -> Int
   length' = getSum . foldMap (const $ Sum 1)
   :}

   :{
   length'' :: (Foldable f) => f a -> Int
   length'' = foldr (const (+ 1)) 0
   :}

   length' [1, 2, 3]
   length' []
   length' Nothing

   length'' [1, 2, 3]
   length'' []
   length'' Nothing
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   3
   0
   0
   3
   0
   0
   #+END_EXAMPLE

8. Implement ~toList~
   #+BEGIN_SRC haskell
   :{
   toList' :: (Foldable f) => f a -> [a]
   toList' = foldMap pure
   :}

   :{
   toList'' :: (Foldable f) => f a -> [a]
   toList'' = foldMap (flip (:) [])
   :}

   :{
   toList''' :: (Foldable f) => f a -> [a]
   toList''' = foldr (:) []
   :}

   toList' [1, 2, 3]
   toList' $ Just 1
   toList' Nothing

   toList'' [1, 2, 3]
   toList'' $ Just 1
   toList'' Nothing

   toList''' [1, 2, 3]
   toList''' $ Just 1
   toList''' Nothing
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   [1,2,3]
   [1]
   []
   [1,2,3]
   [1]
   []
   [1,2,3]
   [1]
   []
   #+END_EXAMPLE

9. Implement ~fold~ (Hint: use ~foldMap~)
   #+BEGIN_SRC haskell
   :{
   fold_ :: (Foldable t, Monoid m) => t m -> m
   fold_ = foldMap id
   :}

   fold_ ["Hello", " ", "World"]
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   "Hello World"
   #+END_EXAMPLE

10. Implement ~foldMap~ (Hint: use ~foldr~)
    #+BEGIN_SRC haskell
    :{
    foldMap_ :: (Foldable t, Monoid m) => (a -> m) -> t a -> m
    foldMap_ f = foldr ((<>) . f) mempty
    :}

    foldMap_ id ["a", "b", "c"]
    #+END_SRC

    #+RESULTS:
    #+BEGIN_EXAMPLE
    "abc"
    #+END_EXAMPLE

* Exercises
** Write Foldable Instances
1. Write ~Foldable~ instance for ~Constant~
   #+BEGIN_SRC haskell :results silent
   data Constant a b = Constant b

   :{
   instance Foldable (Constant a) where
     foldr f z (Constant b) = f b z
   :}
   #+END_SRC

2. Write ~Foldable~ instance for ~Two~
   #+BEGIN_SRC haskell :results silent
   data Two a b = Two a b

   :{
   instance Foldable (Two a) where
     foldr f z (Two _ b) = f b z
   :}
   #+END_SRC

3. Write ~Foldable~ instance for ~Three~
   #+BEGIN_SRC haskell :results silent
   data Three a b c = Three a b c

   :{
   instance Foldable (Three a b) where
     foldr f z (Three _ _ c) = f c z
   :}
   #+END_SRC

4. Write ~Foldable~ instance for ~Three'~
   #+BEGIN_SRC haskell
   import Data.Foldable
   import Data.Monoid

   data Three' a b = Three' a b b

   :{
   instance Foldable (Three' a) where
     foldr f z (Three' _ b1 b2) = f b1 $ f b2 z
   :}

   sum $ Three' undefined (Sum 1) (Sum 2)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   Sum {getSum = 3}
   #+END_EXAMPLE

5. Write ~Foldable~ instance for ~Four'~
   #+BEGIN_SRC haskell
   import Data.Foldable
   import Data.Monoid

   data Four' a b = Four' a b b b

   :{
   instance Foldable (Four' a) where
     foldr f z (Four' _ b1 b2 b3) = f b1 (f b2 (f b3 z))
   :}

   sum $ Four' undefined (Sum 1) (Sum 2) (Sum 3)
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   Sum {getSum = 6}
   #+END_EXAMPLE

6. Write a filter function for ~Foldable~ types using ~foldMap~
   function
   #+BEGIN_SRC haskell
   :{
   filterF :: ( Applicative f
              , Foldable t
              , Monoid (f a))
           => (a -> Bool) -> t a -> f a
   filterF f = foldMap (\a -> if f a then pure a else mempty)
   :}

   filterF odd [1, 2, 3, 4, 5] :: [Int]
   #+END_SRC

   #+RESULTS:
   #+BEGIN_EXAMPLE
   [1,3,5]
   #+END_EXAMPLE
